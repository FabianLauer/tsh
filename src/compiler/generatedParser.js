/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var generatedParser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,17],$V1=[1,18],$V2=[1,11],$V3=[1,19],$V4=[1,20],$V5=[1,21],$V6=[1,15],$V7=[1,16],$V8=[1,9],$V9=[1,4,5,10,100,113,122,125,126,128],$Va=[1,25],$Vb=[4,5],$Vc=[1,32],$Vd=[1,34],$Ve=[1,4,5,10,12,13,17,47,48,50,62,64,71,74,76,80,84,86,87,94,100,113,122,125,126,128],$Vf=[2,116],$Vg=[1,39],$Vh=[18,55],$Vi=[2,109],$Vj=[1,42],$Vk=[2,4],$Vl=[1,45],$Vm=[4,5,10,12,13,17,18,20,21,22,23,24,25,47,48,50,55,62,64,71,74,76,80,83,84,86,87,94,100],$Vn=[2,118],$Vo=[1,52],$Vp=[1,54],$Vq=[10,84,86,87,94,100],$Vr=[1,62],$Vs=[1,4,5,10,12,13,17,18,20,21,22,23,24,25,47,48,50,55,62,64,71,74,76,80,83,84,86,87,94,100,113,122,125,126,128],$Vt=[1,80],$Vu=[1,81],$Vv=[4,10,84,86,87,94,100],$Vw=[1,89],$Vx=[4,10,48,84],$Vy=[1,94],$Vz=[1,100],$VA=[4,10,48,55,84],$VB=[1,139],$VC=[1,140],$VD=[1,118],$VE=[1,132],$VF=[1,119],$VG=[1,115],$VH=[1,120],$VI=[1,113],$VJ=[1,138],$VK=[4,10,12,13,17,47,48,50,62,71,74,80,84,86,87,100],$VL=[4,5,10,12,13,17,47,48,50,62,64,71,74,76,80,84,86,87,94,100],$VM=[2,101],$VN=[1,142],$VO=[4,5,10,12,13,17,31,47,48,50,62,64,71,74,76,80,84,86,87,94,100],$VP=[4,5,10,84,86,87,94,100],$VQ=[4,5,10,12,13,17,47,48,50,62,64,71,74,76,80,84,86,87,100],$VR=[10,12,13,17,47,48,50,62,64,71,74,76,80,84,86,87,100],$VS=[1,150],$VT=[1,153],$VU=[4,5,10,12,13,17,18,47,48,50,55,62,64,71,74,76,80,84,86,87,100],$VV=[1,160],$VW=[1,161],$VX=[1,162],$VY=[1,163],$VZ=[1,164],$V_=[1,165],$V$=[2,48],$V01=[2,39],$V11=[2,45],$V21=[2,50],$V31=[2,14],$V41=[2,24],$V51=[12,13,17,47,48,50,100],$V61=[1,219],$V71=[20,21,22,23,24,25,55],$V81=[4,5,10,12,13,17,18,47,48,50,55,62,64,71,74,76,80,83,84,86,87,94,100];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"nl_or_eof":3,"NL":4,"EOF":5,"maybe_nl":6,"maybe_nls":7,"maybe_nl_or_eof":8,"comment":9,"SL_COMMENT":10,"unary_operator":11,"INC_OP":12,"DEC_OP":13,"atomic_unary_operation":14,"primary_expr":15,"unary_operation":16,"(":17,")":18,"binary_operator":19,".":20,"+":21,"-":22,"*":23,"/":24,"%":25,"atomic_binary_operation":26,"expression":27,"precedence_expr_list":28,"binary_operation":29,"assignment_operator":30,"=":31,"MUL_ASSIGN":32,"DIV_ASSIGN":33,"MOD_ASSIGN":34,"ADD_ASSIGN":35,"SUB_ASSIGN":36,"LEFT_ASSIGN":37,"RIGHT_ASSIGN":38,"AND_ASSIGN":39,"XOR_ASSIGN":40,"OR_ASSIGN":41,"atomic_assignment_expr":42,"identifier":43,"assignment_expr":44,"func_call_expr":45,"string_literal":46,"STRING_LITERAL":47,"IDENTIFIER":48,"atomic_primary_expr":49,"CONSTANT":50,"anon_func_expr":51,"anon_func_decl":52,"operation":53,"expr_list":54,",":55,"expression_statement":56,"type_expr":57,"conditional_body":58,"statement":59,"compound_statement":60,"conditional_if_statement":61,"IF":62,"conditional_else_if_statement":63,"ELSE":64,"conditional_maybe_else_if_statements":65,"conditional_else_statement":66,"conditional_maybe_else_statement":67,"conditional_statement":68,"while_body":69,"while_statement":70,"WHILE":71,"try_catch_body":72,"try_statement":73,"TRY":74,"catch_statement":75,"CATCH":76,"AS":77,"try_catch_statement":78,"return_statement":79,"RETURN":80,"var_decl":81,"statements":82,"{":83,"}":84,"var_decl_modifier":85,"LET":86,"CONST":87,"var_decl_type_decl":88,":":89,"var_decl_name_and_maybe_type_decl":90,"var_decl_maybe_assignment":91,"var_decl_end":92,"static_var_decl_modifier":93,"STATIC":94,"static_var_decl":95,"param_decl_type_expr":96,"param_decl":97,"param_decl_list":98,"func_ident":99,"FUNCTION":100,"func_param_decl_list":101,"func_return_expr":102,"ARR":103,"func_body":104,"func_decl_end":105,"func_decl":106,"anon_func_ident":107,"method_decl":108,"class_body_statement":109,"class_body_statements":110,"class_body_compound_statement":111,"class_ident":112,"CLASS":113,"class_body":114,"class_decl":115,"enum_member_decl":116,"enum_member_decl_list":117,"enum_body_statement":118,"enum_body_statements":119,"enum_body_compound_statement":120,"enum_ident":121,"ENUM":122,"enum_decl":123,"import_statement":124,"IMPORT":125,"EXPORT":126,"root_grammar":127,"export_statement":128,"root_grammar_list":129,"root":130,"$accept":0,"$end":1},
terminals_: {2:"error",4:"NL",5:"EOF",10:"SL_COMMENT",12:"INC_OP",13:"DEC_OP",17:"(",18:")",20:".",21:"+",22:"-",23:"*",24:"/",25:"%",31:"=",32:"MUL_ASSIGN",33:"DIV_ASSIGN",34:"MOD_ASSIGN",35:"ADD_ASSIGN",36:"SUB_ASSIGN",37:"LEFT_ASSIGN",38:"RIGHT_ASSIGN",39:"AND_ASSIGN",40:"XOR_ASSIGN",41:"OR_ASSIGN",47:"STRING_LITERAL",48:"IDENTIFIER",50:"CONSTANT",55:",",62:"IF",64:"ELSE",71:"WHILE",74:"TRY",76:"CATCH",77:"AS",80:"RETURN",83:"{",84:"}",86:"LET",87:"CONST",89:":",94:"STATIC",100:"FUNCTION",103:"ARR",113:"CLASS",122:"ENUM",125:"IMPORT",126:"EXPORT",128:"export_statement"},
productions_: [0,[3,1],[3,1],[6,1],[6,0],[7,1],[7,2],[8,1],[8,1],[9,2],[11,1],[11,1],[14,2],[14,2],[16,1],[16,3],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[26,3],[26,3],[29,1],[29,3],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[42,3],[42,3],[44,1],[44,3],[45,3],[45,2],[46,1],[43,1],[49,1],[49,1],[49,1],[15,1],[15,3],[51,1],[51,3],[53,1],[53,1],[27,1],[27,1],[27,1],[27,1],[27,1],[54,1],[54,3],[28,3],[56,2],[56,2],[57,1],[58,1],[58,1],[61,4],[63,5],[65,1],[65,2],[66,3],[67,1],[67,1],[68,4],[69,1],[69,1],[70,4],[72,1],[72,1],[73,3],[75,3],[75,5],[78,2],[79,3],[59,1],[59,1],[59,1],[59,1],[59,1],[59,1],[59,1],[82,1],[82,2],[60,5],[85,1],[85,1],[88,2],[88,0],[90,2],[91,2],[91,0],[92,1],[81,4],[93,2],[93,2],[95,4],[96,2],[96,0],[97,0],[97,2],[98,1],[98,3],[99,2],[101,3],[102,2],[102,0],[104,1],[104,0],[105,1],[106,5],[107,1],[52,5],[108,5],[109,1],[109,1],[109,1],[109,1],[110,1],[110,2],[111,5],[112,2],[114,1],[114,0],[115,3],[116,1],[116,2],[117,1],[117,4],[118,1],[118,1],[118,1],[119,1],[119,2],[120,5],[121,2],[123,3],[124,3],[124,3],[127,1],[127,1],[127,1],[127,1],[127,1],[127,1],[127,1],[129,1],[129,2],[130,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 9:

	const commentContent = new yy.Token(
		$$[$0-1],
		_$[$0-1].first_line, _$[$0-1].first_column,
		_$[$0-1].last_line, _$[$0-1].last_column
	)
	this.$ = new yy.Comment([commentContent])

break;
case 10: case 11: case 16: case 17: case 18: case 19: case 20: case 21: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36:
 this.$ = yy.getOperatorFromToken($$[$0]) 
break;
case 12:
 this.$ = new yy.UnaryOperation($$[$0-1], $$[$0], yy.UnaryOperatorPosition.Postfix) 
break;
case 13:
 this.$ = new yy.UnaryOperation($$[$0], $$[$0-1], yy.UnaryOperatorPosition.Prefix) 
break;
case 14: case 24: case 39: case 45: case 47: case 48: case 50: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 97: case 107: case 115: case 117: case 132: case 156:
 this.$ = $$[$0] 
break;
case 15: case 25: case 40: case 49: case 51:
 this.$ = new yy.PrecedenceExpr($$[$0-1]) 
break;
case 22: case 23: case 37: case 38:
 this.$ = new yy.BinaryOperation($$[$0-2], $$[$0-1], $$[$0]) 
break;
case 41:
 this.$ = new yy.FuncCall($$[$0-2], new yy.ExprList([])) 
break;
case 42:

			var params;
			if ($$[$0].expr instanceof yy.ExprList) {
				params = new yy.ExprList($$[$0].expr.expressions)
			} else {
				params = new yy.ExprList([$$[$0].expr])
			}
			this.$ = new yy.FuncCall($$[$0-1], params)
		
break;
case 43:

		/*
			We replace the quotes by slicing them away. This is trivial since the quotes
			are *always* the first and last character in the `STRING_LITERAL` terminal.
			The `.trim()` before the `.slice(...)` shouldn't be necessary, but we're
			rather safe than sorry.
		*/
		const stringLiteralContent = new yy.Token(
			($$[$0]).trim().slice(1, -1),
			_$[$0].first_line, _$[$0].first_column,
			_$[$0].last_line, _$[$0].last_column
		)
		this.$ = new yy.StringLiteral(stringLiteralContent)
	
break;
case 44:

	const identifierContent = new yy.Token(
		$$[$0],
		_$[$0].first_line, _$[$0].first_column,
		_$[$0].last_line, _$[$0].last_column
	)
	this.$ = new yy.Identifier(identifierContent)

break;
case 46:

		const atomicPrimaryExprContent = new yy.Token(
			$$[$0],
			_$[$0].first_line, _$[$0].first_column,
			_$[$0].last_line, _$[$0].last_column
		)
		this.$ = new yy.NumericExpr(atomicPrimaryExprContent)
	
break;
case 59:

			const exprs = []
			if (typeof $$[$0] !== 'undefined') {
				exprs.push($$[$0])
			}
			this.$ = new yy.ExprList(exprs)
		
break;
case 60:

			this.$ = new yy.ExprList($$[$0-2].expressions.concat($$[$0]))
		
break;
case 61:

		if ($$[$0-1].expressions.length === 1) {
			this.$ = new yy.PrecedenceExpr($$[$0-1].expressions[0])
		} else {
			this.$ = new yy.PrecedenceExpr($$[$0-1])
		}
	
break;
case 62:

		if ($$[$0-1].expressions.length === 1) {
			this.$ = new yy.ExprStatement($$[$0-1].expressions[0])
		} else {
			this.$ = new yy.ExprStatement($$[$0-1])
		}
	
break;
case 63:
 this.$ = new yy.ExprStatement($$[$0-1]) 
break;
case 64:

		const typeExprIdentifierContent = new yy.Token(
			$$[$0],
			_$[$0].first_line, _$[$0].first_column,
			_$[$0].last_line, _$[$0].last_column
		)
		this.$ = yy.TypeExpr.fromIdentifier(typeExprIdentifierContent)
	
break;
case 67:
 this.$ = new yy.IfStatement($$[$0-2], $$[$0-1]) 
break;
case 68:
 this.$ = new yy.ElseIfStatement($$[$0-2], $$[$0-1]) 
break;
case 70:

		this.$ = $$[$0-1] || []
		if (typeof $$[$0] !== 'undefined') {
			this.$ = this.$.concat($$[$0])
		}
	
break;
case 71:
 this.$ = new yy.ElseStatement([$$[$0-1]]) 
break;
case 74:

		var statements = [$$[$0-3]]
		if (Array.isArray($$[$0-2])) {
			statements = statements.concat($$[$0-2])
		}
		if (typeof $$[$0-1] !== 'undefined') {
			statements.push($$[$0-1])
		}
		this.$ = new yy.Statement(statements)
	
break;
case 77:
 this.$ = new yy.WhileStatement(new yy.ExprList([$$[$0-2]]), new yy.Statement([$$[$0-1]])) 
break;
case 80: case 114:
 this.$ = $$[$0-1] 
break;
case 81:

			this.$ = {
				errorHandlerStatement: $$[$0-1],
				errorIdentifier: undefined
			}
		
break;
case 82:

			this.$ = {
				errorHandlerStatement: $$[$0-1],
				errorIdentifier: $$[$0-2]
			}
		
break;
case 83:

		this.$ = new yy.TryCatchStatement(
			$$[$0-1],
			$$[$0].errorHandlerStatement,
			$$[$0].errorIdentifier
		)
	
break;
case 84:
 this.$ = new yy.ReturnStatement($$[$0-1]) 
break;
case 92: case 128: case 142:
 this.$ = [] 
break;
case 93: case 129: case 143:

			$$[$0-1] = $$[$0-1] || []
			$$[$0] = $$[$0] || yy.Statement.Empty
			this.$ = $$[$0-1].concat($$[$0])
		
break;
case 94: case 130:

			if ($$[$0-2] === '\n' || $$[$0-2] === '') {
				$$[$0-2] = []
			}
			$$[$0-2] = $$[$0-2] || []
			this.$ = new yy.Statement($$[$0-2])
		
break;
case 95: case 96: case 104: case 105:
 this.$ = yy.getVarDeclModifierByKeyword($$[$0]) 
break;
case 99:

	const identifierToken = new yy.Token(
		$$[$0-1],
		_$[$0-1].first_line, _$[$0-1].first_column,
		_$[$0-1].last_line, _$[$0-1].last_column
	)
	this.$ = [identifierToken, $$[$0]]

break;
case 100:
 this.$ = new yy.Expr($$[$0]) 
break;
case 103:

			this.$ = yy.VarDecl.create({
				modifiers: yy.VarDeclModifier.combine($$[$0-3]),
				varName: $$[$0-2][0],
				typeDecl: $$[$0-2][1],
				assignment: $$[$0-1]
			})
		
break;
case 106:

			this.$ = yy.VarDecl.create({
				modifiers: yy.VarDeclModifier.combine(yy.VarDeclModifier.Static, $$[$0-3]),
				varName: $$[$0-2][0],
				typeDecl: $$[$0-2][1],
				assignment: $$[$0-1]
			})
		
break;
case 110:

				const nameToken = new yy.Token(
					$$[$0-1],
					_$[$0-1].first_line, _$[$0-1].first_column,
					_$[$0-1].last_line, _$[$0-1].last_column
				)
				this.$ = new yy.ParamDecl(nameToken, $$[$0])
			
break;
case 111:

			var decls = []
			if (typeof $$[$0] !== 'undefined') {
				decls.push($$[$0])
			}
			this.$ = yy.ParamDeclList.fromParamDecls(decls)
		
break;
case 112:

			this.$ = yy.ParamDeclList.fromParamDecls(
				$$[$0-2].paramDecls.concat($$[$0])
			)
		
break;
case 113: case 131: case 145:

	this.$ = new yy.Token(
		$$[$0],
		_$[$0].first_line, _$[$0].first_column,
		_$[$0].last_line, _$[$0].last_column
	)

break;
case 120:

			this.$ = yy.FuncDecl.create({
				funcName: $$[$0-4],
				runtimeParamDecls: $$[$0-3],
				returnTypeDecl: $$[$0-2],
				funcBody: $$[$0-1]
			})
		
break;
case 122:

			this.$ = yy.AnonFuncDecl.create({
				runtimeParamDecls: $$[$0-3],
				returnTypeDecl: $$[$0-2],
				funcBody: $$[$0-1]
			})
		
break;
case 123:

			this.$ = yy.MethodDecl.create({
				funcName: $$[$0-4],
				runtimeParamDecls: $$[$0-3],
				returnTypeDecl: $$[$0-2],
				funcBody: $$[$0-1]
			})
		
break;
case 134:

			this.$ = yy.ClassDecl.create({
				className: $$[$0-2],
				classBody: $$[$0-1]
			})
		
break;
case 135: case 136:
 this.$ = new yy.EnumMemberDecl(new yy.Token($$[$0])) 
break;
case 137:

			var decls = []
			if (typeof $$[$0] !== 'undefined') {
				decls.push($$[$0])
			}
			this.$ = new yy.Statement(decls)
		
break;
case 138:
 this.$ = new yy.Statement([...$$[$0-3].nodes, $$[$0]]) 
break;
case 144:

		var nodes = []
		$$[$0-2].forEach(commentOrStatement => {
			if (commentOrStatement instanceof yy.Statement) {
				nodes.push(...commentOrStatement.nodes)
			} else {
				nodes.push(commentOrStatement)
			}
		})
		this.$ = new yy.Statement(nodes)
	
break;
case 146:

			this.$ = yy.EnumDecl.create({
				enumName: $$[$0-2],
				enumBody: $$[$0-1]
			})
		
break;
case 147:
 this.$ = new yy.ImportStatement($$[$0-1]) 
break;
case 148:
 this.$ = new yy.ExportStatement($$[$0-1]) 
break;
case 157:

			$$[$0-1] = $$[$0-1] || []
			if (!Array.isArray($$[$0-1])) {
				$$[$0-1] = [$$[$0-1]]
			}
			this.$ = $$[$0-1].concat($$[$0])
		
break;
case 158:

	if (Array.isArray($$[$0])) {
		$$[$0] = $$[$0].filter(node => (
			node !== '\n' &&
			node !== ''
		))
		yy.result.push.apply(yy.result, $$[$0])
	} else {
		yy.result.push($$[$0])
	}
	return this.$

break;
}
},
table: [{3:10,4:$V0,5:$V1,9:4,10:$V2,99:12,100:$V3,106:5,112:13,113:$V4,115:6,121:14,122:$V5,123:7,124:8,125:$V6,126:$V7,127:3,128:$V8,129:2,130:1},{1:[3]},{1:[2,158],3:10,4:$V0,5:$V1,9:4,10:$V2,99:12,100:$V3,106:5,112:13,113:$V4,115:6,121:14,122:$V5,123:7,124:8,125:$V6,126:$V7,127:22,128:$V8},o($V9,[2,156]),o($V9,[2,149]),o($V9,[2,150]),o($V9,[2,151]),o($V9,[2,152]),o($V9,[2,153]),o($V9,[2,154]),o($V9,[2,155]),{3:23,4:$V0,5:$V1},{17:$Va,101:24},o($Vb,[2,133],{114:26,111:27,83:[1,28]}),{83:[1,30],120:29},{46:31,47:$Vc},{43:33,48:$Vd},o($Ve,[2,1]),o($Ve,[2,2]),{48:[1,35]},{48:[1,36]},{48:[1,37]},o($V9,[2,157]),o($Ve,[2,9]),o([1,4,5,10,83,100,113,122,125,126,128],$Vf,{102:38,103:$Vg}),o($Vh,$Vi,{98:40,97:41,48:$Vj}),{3:43,4:$V0,5:$V1},o($Vb,[2,132]),o([5,10,84,86,87,94,100],$Vk,{6:44,4:$Vl}),{3:46,4:$V0,5:$V1},o([5,10,48,84],$Vk,{6:47,4:$Vl}),{3:48,4:$V0,5:$V1},o($Vm,[2,43]),{3:49,4:$V0,5:$V1},o([4,5,10,12,13,17,18,20,21,22,23,24,25,31,32,33,34,35,36,37,38,39,40,41,47,48,50,55,62,64,71,74,76,80,83,84,86,87,94,100],[2,44]),{17:[2,113]},o([4,5,83],[2,131]),{83:[2,145]},o($V9,$Vn,{104:50,60:51,83:$Vo}),{48:$Vp,57:53},{18:[1,55],55:[1,56]},o($Vh,[2,111]),o($Vh,[2,108],{96:57,89:[1,58]}),o($V9,[2,134]),o($Vq,$Vk,{110:59,8:60,7:61,6:63,4:$Vl,5:$Vr}),o($Vs,[2,3]),o($V9,[2,146]),o([10,48,84],$Vk,{7:61,6:63,119:64,8:65,4:$Vl,5:$Vr}),o($V9,[2,147]),o($V9,[2,148]),o([1,10,100,113,122,125,126,128],$Vk,{7:61,6:63,105:66,8:67,4:$Vl,5:$Vr}),o($Vs,[2,117]),o([5,10,12,13,17,47,48,50,62,71,74,80,84,86,87,100],$Vk,{6:68,4:$Vl}),o($Vs,[2,115]),o([1,4,5,10,12,13,17,18,20,21,22,23,24,25,31,47,48,50,55,62,64,71,74,76,80,83,84,86,87,94,100,113,122,125,126,128],[2,64]),o([1,4,5,10,12,13,17,18,20,21,22,23,24,25,47,48,50,55,62,64,71,74,76,80,83,84,86,87,94,100,103,113,122,125,126,128],[2,114]),o($Vh,$Vi,{97:69,48:$Vj}),o($Vh,[2,110]),{48:$Vp,57:70},{4:$Vl,6:71,9:73,10:$V2,81:74,84:$Vk,85:77,86:$Vt,87:$Vu,93:78,94:[1,82],95:75,99:79,100:$V3,108:76,109:72},o($Vv,[2,128]),o([1,5,10,12,13,17,18,20,21,22,23,24,25,47,48,50,55,62,64,71,74,76,80,83,84,86,87,94,100,113,122,125,126,128],[2,7],{6:83,4:$Vl}),o($Vs,[2,8]),o($Vs,[2,5]),{4:$Vl,6:84,9:86,10:$V2,48:$Vw,84:$Vk,116:88,117:87,118:85},o($Vx,[2,142]),o($V9,[2,120]),o($Vs,[2,119]),o([10,12,13,17,47,48,50,62,71,74,80,84,86,87,100],$Vk,{7:61,6:63,82:90,8:91,4:$Vl,5:$Vr}),o($Vh,[2,112]),o($Vh,[2,107]),{84:[1,92]},o($Vv,[2,129]),o($Vv,[2,124]),o($Vv,[2,125]),o($Vv,[2,126]),o($Vv,[2,127]),{48:$Vy,90:93},{48:$Vy,90:95},{17:$Va,101:96},{48:[2,95]},{48:[2,96]},{86:[1,97],87:[1,98]},o($Vs,[2,6]),o([4,10,48],[2,139],{84:[1,99]}),o($Vx,[2,143]),o([4,10,84],[2,140],{48:$Vz}),o($Vx,[2,141],{55:[1,101]}),o($VA,[2,137]),o($VA,[2,135]),{4:$Vl,6:102,9:104,10:$V2,11:137,12:$VB,13:$VC,14:134,15:121,16:127,17:$VD,26:135,27:117,28:112,29:128,42:129,43:130,44:123,45:124,46:133,47:$Vc,48:$Vd,49:126,50:$VE,51:125,52:131,53:122,54:111,56:105,59:103,61:114,62:$VF,68:108,70:109,71:$VG,73:116,74:$VH,78:110,79:107,80:$VI,81:106,84:$Vk,85:77,86:$Vt,87:$Vu,100:$VJ,107:136},o($VK,[2,92]),o($Vb,[2,130]),o($VL,$VM,{91:141,31:$VN}),o($VO,[2,98],{88:143,89:[1,144]}),o($VP,$VM,{91:145,31:$VN}),o([4,5,10,83,84,86,87,94,100],$Vf,{102:146,103:$Vg}),{48:[2,104]},{48:[2,105]},o($Vb,[2,144]),o($VA,[2,136]),o([10,48],$Vk,{6:147,4:$Vl}),{84:[1,148]},o($VK,[2,93]),o($VQ,[2,85]),o($VQ,[2,86]),o($VQ,[2,87]),o($VQ,[2,88]),o($VQ,[2,89]),o($VQ,[2,90]),o($VQ,[2,91]),o($VR,$Vk,{7:61,6:63,8:149,4:$Vl,5:$Vr,55:$VS}),o($VR,$Vk,{7:61,6:63,8:151,4:$Vl,5:$Vr}),{11:137,12:$VB,13:$VC,14:134,15:121,16:127,17:$VT,26:135,27:152,29:128,42:129,43:130,44:123,45:124,46:133,47:$Vc,48:$Vd,49:126,50:$VE,51:125,52:131,53:122,100:$VJ,107:136},o($VR,$Vk,{7:61,6:63,65:154,8:155,4:$Vl,5:$Vr}),{11:137,12:$VB,13:$VC,14:134,15:121,16:127,17:$VT,26:135,27:156,29:128,42:129,43:130,44:123,45:124,46:133,47:$Vc,48:$Vd,49:126,50:$VE,51:125,52:131,53:122,100:$VJ,107:136},{75:157,76:[1,158]},o($VU,[2,59],{19:159,20:$VV,21:$VW,22:$VX,23:$VY,24:$VZ,25:$V_}),{11:137,12:$VB,13:$VC,14:170,15:121,16:127,17:$VT,26:171,27:117,29:128,42:168,43:130,44:123,45:124,46:133,47:$Vc,48:$Vd,49:167,50:$VE,51:125,52:169,53:122,54:166,100:$VJ,107:136},{11:137,12:$VB,13:$VC,14:134,15:121,16:127,17:$VT,26:135,27:172,29:128,42:129,43:130,44:123,45:124,46:133,47:$Vc,48:$Vd,49:126,50:$VE,51:125,52:131,53:122,100:$VJ,107:136},{9:104,10:$V2,11:137,12:$VB,13:$VC,14:134,15:121,16:127,17:$VD,26:135,27:117,28:112,29:128,42:129,43:130,44:123,45:124,46:133,47:$Vc,48:$Vd,49:126,50:$VE,51:125,52:131,53:122,54:111,56:105,59:174,60:175,61:114,62:$VF,68:108,70:109,71:$VG,72:173,73:116,74:$VH,78:110,79:107,80:$VI,81:106,83:$Vo,85:77,86:$Vt,87:$Vu,100:$VJ,107:136},o([4,5,10,17,18,20,21,22,23,24,25,47,48,50,55,62,64,71,74,76,80,83,84,86,87,94,100],[2,54],{11:176,12:$VB,13:$VC}),o($Vm,[2,55]),o($Vm,[2,56]),o($Vm,[2,57]),o($Vm,[2,58]),o($Vm,$V$),o($Vm,[2,52]),o($Vm,[2,53]),o($Vm,$V01),o([4,5,10,12,13,18,20,21,22,23,24,25,47,48,50,55,62,64,71,74,76,80,83,84,86,87,94,100],$V11,{28:178,30:179,17:[1,177],31:[1,180],32:[1,181],33:[1,182],34:[1,183],35:[1,184],36:[1,185],37:[1,186],38:[1,187],39:[1,188],40:[1,189],41:[1,190]}),o($Vm,$V21),o($Vm,[2,46]),o($Vm,[2,47]),o($Vm,$V31),o($Vm,$V41),{17:$Va,101:191},{15:192,17:[1,193],43:194,46:133,47:$Vc,48:$Vd,49:126,50:$VE},{17:[2,121]},o($Vm,[2,10]),o($Vm,[2,11]),o([10,12,13,17,47,48,50,62,64,71,74,76,80,84,86,87,94,100],$Vk,{7:61,6:63,92:195,8:196,4:$Vl,5:$Vr}),{11:137,12:$VB,13:$VC,14:134,15:121,16:127,17:$VT,26:135,27:197,29:128,42:129,43:130,44:123,45:124,46:133,47:$Vc,48:$Vd,49:126,50:$VE,51:125,52:131,53:122,100:$VJ,107:136},o($VO,[2,99]),{48:$Vp,57:198},o($Vq,$Vk,{7:61,6:63,8:196,92:199,4:$Vl,5:$Vr}),o($VP,$Vn,{60:51,104:200,83:$Vo}),{9:202,10:$V2,48:$Vw,116:201},o($Vs,[2,94]),o($VQ,[2,62]),{11:137,12:$VB,13:$VC,14:134,15:121,16:127,17:$VT,26:135,27:203,29:128,42:129,43:130,44:123,45:124,46:133,47:$Vc,48:$Vd,49:126,50:$VE,51:125,52:131,53:122,100:$VJ,107:136},o($VQ,[2,63]),o($VR,$Vk,{7:61,6:63,19:159,8:204,4:$Vl,5:$Vr,20:$VV,21:$VW,22:$VX,23:$VY,24:$VZ,25:$V_}),{11:137,12:$VB,13:$VC,14:170,15:121,16:127,17:$VT,26:171,27:205,29:128,42:168,43:130,44:123,45:124,46:133,47:$Vc,48:$Vd,49:167,50:$VE,51:125,52:169,53:122,100:$VJ,107:136},o([10,12,13,17,47,48,50,62,71,74,76,80,84,86,87,100],$Vk,{7:61,6:63,67:206,63:207,66:208,8:209,4:$Vl,5:$Vr,64:[1,210]}),o($VQ,[2,69]),{9:104,10:$V2,11:137,12:$VB,13:$VC,14:134,15:121,16:127,17:$VD,19:159,20:$VV,21:$VW,22:$VX,23:$VY,24:$VZ,25:$V_,26:135,27:117,28:112,29:128,42:129,43:130,44:123,45:124,46:133,47:$Vc,48:$Vd,49:126,50:$VE,51:125,52:131,53:122,54:111,56:105,59:212,60:213,61:114,62:$VF,68:108,69:211,70:109,71:$VG,73:116,74:$VH,78:110,79:107,80:$VI,81:106,83:$Vo,85:77,86:$Vt,87:$Vu,100:$VJ,107:136},o($VQ,[2,83]),{9:104,10:$V2,11:137,12:$VB,13:$VC,14:134,15:121,16:127,17:$VD,26:135,27:117,28:112,29:128,42:129,43:130,44:123,45:124,46:133,47:$Vc,48:$Vd,49:126,50:$VE,51:125,52:131,53:122,54:111,56:105,59:174,60:175,61:114,62:$VF,68:108,70:109,71:$VG,72:214,73:116,74:$VH,77:[1,215],78:110,79:107,80:$VI,81:106,83:$Vo,85:77,86:$Vt,87:$Vu,100:$VJ,107:136},{11:137,12:$VB,13:$VC,14:134,15:121,16:127,17:$VD,26:135,27:216,28:217,29:128,42:129,43:130,44:123,45:124,46:133,47:$Vc,48:$Vd,49:126,50:$VE,51:125,52:131,53:122,100:$VJ,107:136},o($V51,[2,16]),o($V51,[2,17]),o($V51,[2,18]),o($V51,[2,19]),o($V51,[2,20]),o($V51,[2,21]),{18:[1,218],55:$VS},o([12,13,20,21,22,23,24,25,55],$V$,{18:$V61}),o($V71,$V01,{18:[1,220]}),o($V71,$V21,{18:[1,221]}),o($V71,$V31,{18:[1,222]}),o($V71,$V41,{18:[1,223]}),{9:104,10:$V2,11:137,12:$VB,13:$VC,14:134,15:121,16:127,17:$VD,19:159,20:$VV,21:$VW,22:$VX,23:$VY,24:$VZ,25:$V_,26:135,27:117,28:112,29:128,42:129,43:130,44:123,45:124,46:133,47:$Vc,48:$Vd,49:126,50:$VE,51:125,52:131,53:122,54:111,56:105,58:224,59:225,60:226,61:114,62:$VF,68:108,70:109,71:$VG,73:116,74:$VH,78:110,79:107,80:$VI,81:106,83:$Vo,85:77,86:$Vt,87:$Vu,100:$VJ,107:136},{4:$Vl,5:$Vr,6:63,7:61,8:227,76:$Vk},o($VQ,[2,78]),o($VQ,[2,79]),o($Vm,[2,12]),{11:137,12:$VB,13:$VC,14:134,15:121,16:127,17:$VT,18:[1,228],26:135,27:117,29:128,42:129,43:130,44:123,45:124,46:133,47:$Vc,48:$Vd,49:126,50:$VE,51:125,52:131,53:122,54:166,100:$VJ,107:136},o($Vm,[2,42]),{11:137,12:$VB,13:$VC,14:134,15:121,16:127,17:$VD,26:135,27:229,28:230,29:128,42:129,43:130,44:123,45:124,46:133,47:$Vc,48:$Vd,49:126,50:$VE,51:125,52:131,53:122,100:$VJ,107:136},o($V51,[2,26]),o($V51,[2,27]),o($V51,[2,28]),o($V51,[2,29]),o($V51,[2,30]),o($V51,[2,31]),o($V51,[2,32]),o($V51,[2,33]),o($V51,[2,34]),o($V51,[2,35]),o($V51,[2,36]),o($Vm,$Vf,{102:231,103:$Vg}),o($Vm,[2,13]),{43:194,46:133,47:$Vc,48:$Vd,49:232,50:$VE},o($Vm,$V11),o($VL,[2,103]),o($VL,[2,102]),o($VL,[2,100],{19:159,20:$VV,21:$VW,22:$VX,23:$VY,24:$VZ,25:$V_}),o($VO,[2,97]),o($Vv,[2,106]),o($Vq,$Vk,{7:61,6:63,8:67,105:233,4:$Vl,5:$Vr}),o($VA,[2,138]),{48:$Vz},o($VU,[2,60],{19:159,20:$VV,21:$VW,22:$VX,23:$VY,24:$VZ,25:$V_}),o($VQ,[2,84]),{19:159,20:$VV,21:$VW,22:$VX,23:$VY,24:$VZ,25:$V_},o($VR,$Vk,{7:61,6:63,8:234,4:$Vl,5:$Vr}),o($VQ,[2,70]),o($VQ,[2,72]),o($VQ,[2,73]),{9:104,10:$V2,11:137,12:$VB,13:$VC,14:134,15:121,16:127,17:$VD,26:135,27:117,28:112,29:128,42:129,43:130,44:123,45:124,46:133,47:$Vc,48:$Vd,49:126,50:$VE,51:125,52:131,53:122,54:111,56:105,58:236,59:225,60:226,61:114,62:[1,235],68:108,70:109,71:$VG,73:116,74:$VH,78:110,79:107,80:$VI,81:106,83:$Vo,85:77,86:$Vt,87:$Vu,100:$VJ,107:136},o($VR,$Vk,{7:61,6:63,8:237,4:$Vl,5:$Vr}),o($VQ,[2,75]),o($VQ,[2,76]),o($VR,$Vk,{7:61,6:63,8:238,4:$Vl,5:$Vr}),{11:137,12:$VB,13:$VC,14:134,15:121,16:127,17:$VT,26:135,27:239,29:128,42:129,43:130,44:123,45:124,46:133,47:$Vc,48:$Vd,49:126,50:$VE,51:125,52:131,53:122,100:$VJ,107:136},o($V81,[2,22],{19:159,20:$VV,21:$VW,22:$VX,23:$VY,24:$VZ,25:$V_}),o($Vm,[2,23]),o($Vm,[2,61]),o($Vm,[2,49]),o($Vm,[2,40]),o($Vm,[2,51]),o($Vm,[2,15]),o($Vm,[2,25]),o($VR,$Vk,{7:61,6:63,8:240,4:$Vl,5:$Vr}),o($VQ,[2,65]),o($VQ,[2,66]),{76:[2,80]},o($Vm,[2,41]),o($V81,[2,37],{19:159,20:$VV,21:$VW,22:$VX,23:$VY,24:$VZ,25:$V_}),o($Vm,[2,38]),o([4,5,10,12,13,17,18,20,21,22,23,24,25,47,48,50,55,62,64,71,74,76,80,84,86,87,94,100],$Vn,{60:51,104:241,83:$Vo}),{18:$V61},o($Vv,[2,123]),o($VQ,[2,74]),{11:137,12:$VB,13:$VC,14:134,15:121,16:127,17:$VT,26:135,27:242,29:128,42:129,43:130,44:123,45:124,46:133,47:$Vc,48:$Vd,49:126,50:$VE,51:125,52:131,53:122,100:$VJ,107:136},o($VR,$Vk,{7:61,6:63,8:243,4:$Vl,5:$Vr}),o($VQ,[2,77]),o($VQ,[2,81]),{9:104,10:$V2,11:137,12:$VB,13:$VC,14:134,15:121,16:127,17:$VD,19:159,20:$VV,21:$VW,22:$VX,23:$VY,24:$VZ,25:$V_,26:135,27:117,28:112,29:128,42:129,43:130,44:123,45:124,46:133,47:$Vc,48:$Vd,49:126,50:$VE,51:125,52:131,53:122,54:111,56:105,59:174,60:175,61:114,62:$VF,68:108,70:109,71:$VG,72:244,73:116,74:$VH,78:110,79:107,80:$VI,81:106,83:$Vo,85:77,86:$Vt,87:$Vu,100:$VJ,107:136},o($VQ,[2,67]),o([10,12,13,17,18,20,21,22,23,24,25,47,48,50,55,62,64,71,74,76,80,83,84,86,87,94,100],$Vk,{7:61,6:63,8:67,105:245,4:$Vl,5:$Vr}),{9:104,10:$V2,11:137,12:$VB,13:$VC,14:134,15:121,16:127,17:$VD,19:159,20:$VV,21:$VW,22:$VX,23:$VY,24:$VZ,25:$V_,26:135,27:117,28:112,29:128,42:129,43:130,44:123,45:124,46:133,47:$Vc,48:$Vd,49:126,50:$VE,51:125,52:131,53:122,54:111,56:105,58:246,59:225,60:226,61:114,62:$VF,68:108,70:109,71:$VG,73:116,74:$VH,78:110,79:107,80:$VI,81:106,83:$Vo,85:77,86:$Vt,87:$Vu,100:$VJ,107:136},o($VQ,[2,71]),o($VR,$Vk,{7:61,6:63,8:247,4:$Vl,5:$Vr}),o($Vm,[2,122]),o($VR,$Vk,{7:61,6:63,8:248,4:$Vl,5:$Vr}),o($VQ,[2,82]),o($VQ,[2,68])],
defaultActions: {35:[2,113],37:[2,145],80:[2,95],81:[2,96],97:[2,104],98:[2,105],138:[2,121],227:[2,80]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 10;
break;
case 1:return 125;
break;
case 2:return 126;
break;
case 3:return 100;
break;
case 4:return 113;
break;
case 5:return 122;
break;
case 6:return 86;
break;
case 7:return 87;
break;
case 8:return 94;
break;
case 9:return 80;
break;
case 10:return 62;
break;
case 11:return 64;
break;
case 12:return 71;
break;
case 13:return 74;
break;
case 14:return 76;
break;
case 15:return 77;
break;
case 16:return 4;
break;
case 17:return 48;
break;
case 18:return 50;
break;
case 19:return 50;
break;
case 20:return 50;
break;
case 21:return 50;
break;
case 22:return 50;
break;
case 23:return 50;
break;
case 24:return 50;
break;
case 25:return 47;
break;
case 26:return 38;
break;
case 27:return 37;
break;
case 28:return 35;
break;
case 29:return 36;
break;
case 30:return 32;
break;
case 31:return 33;
break;
case 32:return 34;
break;
case 33:return 39;
break;
case 34:return 40;
break;
case 35:return 41;
break;
case 36:return 'RIGHT_OP';
break;
case 37:return 'LEFT_OP';
break;
case 38:return 12;
break;
case 39:return 13;
break;
case 40:return 103;
break;
case 41:return 'AND_OP';
break;
case 42:return 'OR_OP';
break;
case 43:return 'LE_OP';
break;
case 44:return 'GE_OP';
break;
case 45:return 'EQ_OP';
break;
case 46:return 'NE_OP';
break;
case 47:return 5;
break;
case 48: return(';'); 
break;
case 49: return('{'); 
break;
case 50: return('}'); 
break;
case 51: return(','); 
break;
case 52: return(':'); 
break;
case 53: return('='); 
break;
case 54: return('('); 
break;
case 55: return(')'); 
break;
case 56: return('['); 
break;
case 57: return(']'); 
break;
case 58: return('.'); 
break;
case 59: return('&'); 
break;
case 60: return('!'); 
break;
case 61: return('~'); 
break;
case 62: return('-'); 
break;
case 63: return('+'); 
break;
case 64: return('*'); 
break;
case 65: return('/'); 
break;
case 66: return('%'); 
break;
case 67: return('<'); 
break;
case 68: return('>'); 
break;
case 69: return('^'); 
break;
case 70: return('|'); 
break;
case 71: return('?'); 
break;
case 72: 
break;
case 73: /* ignore bad characters */ 
break;
}
},
rules: [/^(?:\/\/(.*))/,/^(?:import\b)/,/^(?:export\b)/,/^(?:func\b)/,/^(?:class\b)/,/^(?:enum\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:static\b)/,/^(?:return\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:while\b)/,/^(?:try\b)/,/^(?:catch\b)/,/^(?:as\b)/,/^(?:(\n))/,/^(?:([a-zA-Z_])(([a-zA-Z_])|([0-9]))*)/,/^(?:([0-9])+\.([0-9])*(([Ee][+-]?([0-9])+))?([fFlL])?)/,/^(?:([0-9])*\.([0-9])+(([Ee][+-]?([0-9])+))?([fFlL])?)/,/^(?:0[xX]([a-fA-F0-9])+([uUlL]*)?)/,/^(?:0([0-9])+([uUlL]*)?)/,/^(?:([0-9])+([uUlL]*)?)/,/^(?:L?'(\\'|[^'])+')/,/^(?:([0-9])+([Ee][+-]?([0-9])+)([fFlL])?)/,/^(?:L?"(\\"|[^"])*")/,/^(?:>>=)/,/^(?:<<=)/,/^(?:\+=)/,/^(?:-=)/,/^(?:\*=)/,/^(?:\/=)/,/^(?:%=)/,/^(?:&=)/,/^(?:\^=)/,/^(?:\|=)/,/^(?:>>)/,/^(?:<<)/,/^(?:\+\+)/,/^(?:--)/,/^(?:->)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:!=)/,/^(?:$)/,/^(?:;)/,/^(?:(\{|<%))/,/^(?:(\}|%>))/,/^(?:,)/,/^(?::)/,/^(?:=)/,/^(?:\()/,/^(?:\))/,/^(?:(\[|<:))/,/^(?:(\]|:>))/,/^(?:\.)/,/^(?:&)/,/^(?:!)/,/^(?:~)/,/^(?:-)/,/^(?:\+)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:<)/,/^(?:>)/,/^(?:\^)/,/^(?:\|)/,/^(?:\?)/,/^(?:[ \t\v\r\f])/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = generatedParser;
exports.Parser = generatedParser.Parser;
exports.parse = function () { return generatedParser.parse.apply(generatedParser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}