/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var generatedParser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,11],$V1=[1,12],$V2=[1,8],$V3=[1,13],$V4=[1,14],$V5=[1,4,5,10,77,91],$V6=[1,18],$V7=[4,5],$V8=[1,4,5,10,12,13,37,39,40,48,50,56,60,62,63,70,77,91],$V9=[2,83],$Va=[1,25],$Vb=[75,80],$Vc=[2,76],$Vd=[1,28],$Ve=[2,4],$Vf=[1,31],$Vg=[2,85],$Vh=[1,34],$Vi=[1,36],$Vj=[10,60,62,63,70,77],$Vk=[1,44],$Vl=[1,4,5,10,60,62,63,70,77,91],$Vm=[1,60],$Vn=[1,61],$Vo=[4,10,60,62,63,70,77],$Vp=[10,12,13,37,39,40,48,56,60,62,63],$Vq=[1,68],$Vr=[1,93],$Vs=[1,94],$Vt=[1,87],$Vu=[1,88],$Vv=[1,89],$Vw=[1,86],$Vx=[1,81],$Vy=[4,10,12,13,37,39,40,48,56,60,62,63],$Vz=[4,5,10,12,13,37,39,40,48,50,56,60,62,63,70,77],$VA=[2,68],$VB=[1,96],$VC=[4,5,10,12,13,25,37,39,40,48,50,56,60,62,63,70,77],$VD=[4,5,10,60,62,63,70,77],$VE=[4,5,10,12,13,37,39,40,48,50,56,60,62,63],$VF=[10,12,13,37,39,40,48,50,56,60,62,63],$VG=[4,5,10,12,13,37,39,40,48,50,56,59,60,62,63,70,77],$VH=[4,5,10,12,13,17,18,19,20,21,22,37,39,40,48,50,56,59,60,62,63,70,77],$VI=[2,33],$VJ=[1,128],$VK=[37,39,40],$VL=[12,13,37,39,40];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"nl_or_eof":3,"NL":4,"EOF":5,"maybe_nl":6,"maybe_nls":7,"maybe_nl_or_eof":8,"comment":9,"SL_COMMENT":10,"unary_operator":11,"INC_OP":12,"DEC_OP":13,"unary_operation":14,"primary_expr":15,"binary_operator":16,".":17,"+":18,"-":19,"*":20,"/":21,"%":22,"binary_operation":23,"assignment_operator":24,"=":25,"MUL_ASSIGN":26,"DIV_ASSIGN":27,"MOD_ASSIGN":28,"ADD_ASSIGN":29,"SUB_ASSIGN":30,"LEFT_ASSIGN":31,"RIGHT_ASSIGN":32,"AND_ASSIGN":33,"XOR_ASSIGN":34,"OR_ASSIGN":35,"assignment_expr":36,"IDENTIFIER":37,"expression":38,"STRING_LITERAL":39,"CONSTANT":40,"operation":41,"expression_statement":42,"type_expr":43,"conditional_body":44,"statement":45,"compound_statement":46,"conditional_if_statement":47,"IF":48,"conditional_else_if_statement":49,"ELSE":50,"conditional_maybe_else_if_statements":51,"conditional_else_statement":52,"conditional_maybe_else_statement":53,"conditional_statement":54,"return_statement":55,"RETURN":56,"var_decl":57,"statements":58,"{":59,"}":60,"var_decl_modifier":61,"LET":62,"CONST":63,"var_decl_type_decl":64,":":65,"var_decl_name_and_maybe_type_decl":66,"var_decl_maybe_assignment":67,"var_decl_end":68,"static_var_decl_modifier":69,"STATIC":70,"static_var_decl":71,"param_decl_type_expr":72,"param_decl":73,"param_decl_list":74,",":75,"func_ident":76,"FUNCTION":77,"func_param_decl_list":78,"(":79,")":80,"func_return_expr":81,"ARR":82,"func_body":83,"func_decl_end":84,"func_decl":85,"method_decl":86,"class_body_statement":87,"class_body_statements":88,"class_body_compound_statement":89,"class_ident":90,"CLASS":91,"class_body":92,"class_decl":93,"root_grammar":94,"root_grammar_list":95,"root":96,"$accept":0,"$end":1},
terminals_: {2:"error",4:"NL",5:"EOF",10:"SL_COMMENT",12:"INC_OP",13:"DEC_OP",17:".",18:"+",19:"-",20:"*",21:"/",22:"%",25:"=",26:"MUL_ASSIGN",27:"DIV_ASSIGN",28:"MOD_ASSIGN",29:"ADD_ASSIGN",30:"SUB_ASSIGN",31:"LEFT_ASSIGN",32:"RIGHT_ASSIGN",33:"AND_ASSIGN",34:"XOR_ASSIGN",35:"OR_ASSIGN",37:"IDENTIFIER",39:"STRING_LITERAL",40:"CONSTANT",48:"IF",50:"ELSE",56:"RETURN",59:"{",60:"}",62:"LET",63:"CONST",65:":",70:"STATIC",75:",",77:"FUNCTION",79:"(",80:")",82:"ARR",91:"CLASS"},
productions_: [0,[3,1],[3,1],[6,1],[6,0],[7,1],[7,2],[8,1],[8,1],[9,2],[11,1],[11,1],[14,2],[14,2],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[23,3],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[36,3],[15,1],[15,1],[15,1],[41,1],[41,1],[38,1],[38,1],[38,1],[42,2],[43,1],[44,1],[44,1],[47,4],[49,5],[51,1],[51,2],[52,3],[53,1],[53,1],[54,4],[55,3],[45,1],[45,1],[45,1],[45,1],[45,1],[58,1],[58,2],[46,5],[61,1],[61,1],[64,2],[64,0],[66,2],[67,2],[67,0],[68,1],[57,4],[69,2],[69,2],[71,4],[72,2],[72,0],[73,0],[73,2],[74,1],[74,3],[76,2],[78,3],[81,2],[81,0],[83,1],[83,0],[84,1],[85,5],[86,5],[87,1],[87,1],[87,1],[87,1],[88,1],[88,2],[89,5],[90,2],[92,1],[92,0],[93,3],[94,1],[94,1],[94,1],[94,1],[95,1],[95,2],[96,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 9:
 this.$ = new yy.Comment([new yy.Token($$[$0-1])]) 
break;
case 10: case 11: case 14: case 15: case 16: case 17: case 18: case 19: case 22: case 23: case 24: case 25: case 26: case 27: case 28: case 29: case 30: case 31:
 this.$ = yy.getOperatorFromToken($$[$0]) 
break;
case 12:
 this.$ = new yy.UnaryOperation($$[$0-1], $$[$0], yy.UnaryOperatorPosition.Postfix) 
break;
case 13:
 this.$ = new yy.UnaryOperation($$[$0-1], $$[$0], yy.UnaryOperatorPosition.Prefix) 
break;
case 20:
 this.$ = new yy.BinaryOperation($$[$0-2], $$[$0-1], $$[$0]) 
break;
case 32:
 this.$ = new yy.BinaryOperation(new yy.Expr($$[$0-2]), $$[$0-1], $$[$0]) 
break;
case 36: case 37: case 39: case 40: case 74: case 82: case 84: case 97: case 104:
 this.$ = $$[$0] 
break;
case 38: case 67:
 this.$ = new yy.Expr($$[$0]) 
break;
case 41:
 this.$ = new yy.ExprStatement($$[$0-1]) 
break;
case 42:
 this.$ = yy.TypeExpr.fromIdentifier(new yy.Token($$[$0])) 
break;
case 45:
 this.$ = new yy.IfStatement($$[$0-2], $$[$0-1]) 
break;
case 46:
 this.$ = new yy.ElseIfStatement($$[$0-2], $$[$0-1]) 
break;
case 48:

		this.$ = $$[$0-1] || []
		if (typeof $$[$0] !== 'undefined') {
			this.$ = this.$.concat($$[$0])
		}
	
break;
case 49:
 this.$ = new yy.ElseStatement([$$[$0-1]]) 
break;
case 52:

		var statements = [$$[$0-3]]
		if (Array.isArray($$[$0-2])) {
			statements = statements.concat($$[$0-2])
		}
		if (typeof $$[$0-1] !== 'undefined') {
			statements.push($$[$0-1])
		}
		this.$ = new yy.Statement(statements)
	
break;
case 53:
 this.$ = new yy.ReturnStatement($$[$0-1]) 
break;
case 59: case 93:
 this.$ = [] 
break;
case 60: case 94:

			$$[$0-1] = $$[$0-1] || []
			$$[$0] = $$[$0] || yy.Statement.Empty
			this.$ = $$[$0-1].concat($$[$0])
		
break;
case 61: case 95:

			if ($$[$0-2] === '\n' || $$[$0-2] === '') {
				$$[$0-2] = []
			}
			$$[$0-2] = $$[$0-2] || []
			this.$ = new yy.Statement($$[$0-2])
		
break;
case 62: case 63: case 71: case 72:
 this.$ = yy.getVarDeclModifierByKeyword($$[$0]) 
break;
case 64: case 81:
 this.$ = $$[$0-1] 
break;
case 66:
 this.$ = [yy.createToken($$[$0-1]), $$[$0]] 
break;
case 70:

			this.$ = yy.VarDecl.create({
				modifiers: yy.VarDeclModifier.combine($$[$0-3]),
				varName: $$[$0-2][0],
				typeDecl: $$[$0-2][1],
				assignment: $$[$0-1]
			})
		
break;
case 73:

			this.$ = yy.VarDecl.create({
				modifiers: yy.VarDeclModifier.combine(yy.VarDeclModifier.Static, $$[$0-3]),
				varName: $$[$0-2][0],
				typeDecl: $$[$0-2][1],
				assignment: $$[$0-1]
			})
		
break;
case 77:
 this.$ = new yy.ParamDecl(new yy.Token($$[$0-1]), $$[$0]) 
break;
case 78:

			const decls = []
			if (typeof $$[$0] !== 'undefined') {
				decls.push($$[$0])
			}
			this.$ = yy.ParamDeclList.fromParamDecls(decls)
		
break;
case 79:

			this.$ = yy.ParamDeclList.fromParamDecls(
				$$[$0-2].paramDecls.concat($$[$0])
			)
		
break;
case 80: case 96:
 this.$ = yy.createToken($$[$0]) 
break;
case 87:

			this.$ = yy.FuncDecl.create({
				funcName: $$[$0-4],
				runtimeParamDecls: $$[$0-3],
				returnTypeDecl: $$[$0-2],
				funcBody: $$[$0-1]
			})
		
break;
case 88:

			this.$ = yy.MethodDecl.create({
				funcName: $$[$0-4],
				runtimeParamDecls: $$[$0-3],
				returnTypeDecl: $$[$0-2],
				funcBody: $$[$0-1]
			})
		
break;
case 99:

			this.$ = yy.ClassDecl.create({
				className: $$[$0-2],
				classBody: $$[$0-1]
			})
		
break;
case 105:

			$$[$0-1] = $$[$0-1] || []
			if (!Array.isArray($$[$0-1])) {
				$$[$0-1] = [$$[$0-1]]
			}
			this.$ = $$[$0-1].concat($$[$0])
		
break;
case 106:

	if (Array.isArray($$[$0])) {
		$$[$0] = $$[$0].filter(node => (
			node !== '\n' &&
			node !== ''
		))
		yy.result.push.apply(yy.result, $$[$0])
	} else {
		yy.result.push($$[$0])
	}
	return this.$

break;
}
},
table: [{3:7,4:$V0,5:$V1,9:4,10:$V2,76:9,77:$V3,85:5,90:10,91:$V4,93:6,94:3,95:2,96:1},{1:[3]},{1:[2,106],3:7,4:$V0,5:$V1,9:4,10:$V2,76:9,77:$V3,85:5,90:10,91:$V4,93:6,94:15},o($V5,[2,104]),o($V5,[2,100]),o($V5,[2,101]),o($V5,[2,102]),o($V5,[2,103]),{3:16,4:$V0,5:$V1},{78:17,79:$V6},o($V7,[2,98],{92:19,89:20,59:[1,21]}),o($V8,[2,1]),o($V8,[2,2]),{37:[1,22]},{37:[1,23]},o($V5,[2,105]),o($V8,[2,9]),o([1,4,5,10,59,77,91],$V9,{81:24,82:$Va}),o($Vb,$Vc,{74:26,73:27,37:$Vd}),{3:29,4:$V0,5:$V1},o($V7,[2,97]),o([5,10,60,62,63,70,77],$Ve,{6:30,4:$Vf}),{79:[2,80]},o([4,5,59],[2,96]),o($V5,$Vg,{83:32,46:33,59:$Vh}),{37:$Vi,43:35},{75:[1,38],80:[1,37]},o($Vb,[2,78]),o($Vb,[2,75],{72:39,65:[1,40]}),o($V5,[2,99]),o($Vj,$Ve,{88:41,8:42,7:43,6:45,4:$Vf,5:$Vk}),o($V8,[2,3]),o([1,10,77,91],$Ve,{7:43,6:45,84:46,8:47,4:$Vf,5:$Vk}),o($Vl,[2,84]),o([5,10,12,13,37,39,40,48,56,60,62,63],$Ve,{6:48,4:$Vf}),o([1,4,5,10,59,60,62,63,70,77,91],[2,82]),o([1,4,5,10,12,13,25,37,39,40,48,50,56,59,60,62,63,70,75,77,80,91],[2,42]),o([1,4,5,10,59,60,62,63,70,77,82,91],[2,81]),o($Vb,$Vc,{73:49,37:$Vd}),o($Vb,[2,77]),{37:$Vi,43:50},{4:$Vf,6:51,9:53,10:$V2,57:54,60:$Ve,61:57,62:$Vm,63:$Vn,69:58,70:[1,62],71:55,76:59,77:$V3,86:56,87:52},o($Vo,[2,93]),o([1,5,10,12,13,37,39,40,48,50,56,60,62,63,70,77,91],[2,7],{6:63,4:$Vf}),o($V8,[2,8]),o($V8,[2,5]),o($V5,[2,87]),o($Vl,[2,86]),o($Vp,$Ve,{7:43,6:45,58:64,8:65,4:$Vf,5:$Vk}),o($Vb,[2,79]),o($Vb,[2,74]),{60:[1,66]},o($Vo,[2,94]),o($Vo,[2,89]),o($Vo,[2,90]),o($Vo,[2,91]),o($Vo,[2,92]),{37:$Vq,66:67},{37:$Vq,66:69},{78:70,79:$V6},{37:[2,62]},{37:[2,63]},{62:[1,71],63:[1,72]},o($V8,[2,6]),{4:$Vf,6:73,9:75,10:$V2,11:92,12:$Vr,13:$Vs,14:90,15:83,23:91,36:85,37:$Vt,38:80,39:$Vu,40:$Vv,41:84,42:76,45:74,47:82,48:$Vw,54:79,55:78,56:$Vx,57:77,60:$Ve,61:57,62:$Vm,63:$Vn},o($Vy,[2,59]),o($V7,[2,95]),o($Vz,$VA,{67:95,25:$VB}),o($VC,[2,65],{64:97,65:[1,98]}),o($VD,$VA,{67:99,25:$VB}),o([4,5,10,59,60,62,63,70,77],$V9,{81:100,82:$Va}),{37:[2,71]},{37:[2,72]},{60:[1,101]},o($Vy,[2,60]),o($VE,[2,54]),o($VE,[2,55]),o($VE,[2,56]),o($VE,[2,57]),o($VE,[2,58]),o($VF,$Ve,{7:43,6:45,8:102,4:$Vf,5:$Vk}),{11:92,12:$Vr,13:$Vs,14:90,15:83,23:91,36:85,37:$Vt,38:103,39:$Vu,40:$Vv,41:84},o($VF,$Ve,{7:43,6:45,51:104,8:105,4:$Vf,5:$Vk}),o([4,5,10,37,39,40,48,50,56,59,60,62,63,70,77],[2,38],{11:106,16:107,12:$Vr,13:$Vs,17:[1,108],18:[1,109],19:[1,110],20:[1,111],21:[1,112],22:[1,113]}),o($VG,[2,39]),o($VG,[2,40]),{11:92,12:$Vr,13:$Vs,14:90,15:83,23:91,36:85,37:$Vt,38:114,39:$Vu,40:$Vv,41:84},o($VH,$VI,{24:115,25:[1,116],26:[1,117],27:[1,118],28:[1,119],29:[1,120],30:[1,121],31:[1,122],32:[1,123],33:[1,124],34:[1,125],35:[1,126]}),o($VH,[2,34]),o($VH,[2,35]),o($VG,[2,36]),o($VG,[2,37]),{15:127,37:$VJ,39:$Vu,40:$Vv},o($VG,[2,10]),o($VG,[2,11]),o([10,12,13,37,39,40,48,50,56,60,62,63,70,77],$Ve,{7:43,6:45,68:129,8:130,4:$Vf,5:$Vk}),{11:92,12:$Vr,13:$Vs,14:90,15:83,23:91,36:85,37:$Vt,38:131,39:$Vu,40:$Vv,41:84},o($VC,[2,66]),{37:$Vi,43:132},o($Vj,$Ve,{7:43,6:45,8:130,68:133,4:$Vf,5:$Vk}),o($VD,$Vg,{46:33,83:134,59:$Vh}),o($V8,[2,61]),o($VE,[2,41]),o($VF,$Ve,{7:43,6:45,8:135,4:$Vf,5:$Vk}),o($Vp,$Ve,{7:43,6:45,53:136,49:137,52:138,8:139,4:$Vf,5:$Vk,50:[1,140]}),o($VE,[2,47]),o($VG,[2,12]),{15:141,37:$VJ,39:$Vu,40:$Vv},o($VK,[2,14]),o($VK,[2,15]),o($VK,[2,16]),o($VK,[2,17]),o($VK,[2,18]),o($VK,[2,19]),{9:75,10:$V2,11:92,12:$Vr,13:$Vs,14:90,15:83,23:91,36:85,37:$Vt,38:80,39:$Vu,40:$Vv,41:84,42:76,44:142,45:143,46:144,47:82,48:$Vw,54:79,55:78,56:$Vx,57:77,59:$Vh,61:57,62:$Vm,63:$Vn},{11:92,12:$Vr,13:$Vs,14:90,15:83,23:91,36:85,37:$Vt,38:145,39:$Vu,40:$Vv,41:84},o($VL,[2,21]),o($VL,[2,22]),o($VL,[2,23]),o($VL,[2,24]),o($VL,[2,25]),o($VL,[2,26]),o($VL,[2,27]),o($VL,[2,28]),o($VL,[2,29]),o($VL,[2,30]),o($VL,[2,31]),o($VG,[2,13]),o($VG,$VI),o($Vz,[2,70]),o($Vz,[2,69]),o($Vz,[2,67]),o($VC,[2,64]),o($Vo,[2,73]),o($Vj,$Ve,{7:43,6:45,8:47,84:146,4:$Vf,5:$Vk}),o($VE,[2,53]),o($VF,$Ve,{7:43,6:45,8:147,4:$Vf,5:$Vk}),o($VE,[2,48]),o($VE,[2,50]),o($VE,[2,51]),{9:75,10:$V2,11:92,12:$Vr,13:$Vs,14:90,15:83,23:91,36:85,37:$Vt,38:80,39:$Vu,40:$Vv,41:84,42:76,44:149,45:143,46:144,47:82,48:[1,148],54:79,55:78,56:$Vx,57:77,59:$Vh,61:57,62:$Vm,63:$Vn},o($VG,[2,20]),o($VF,$Ve,{7:43,6:45,8:150,4:$Vf,5:$Vk}),o($VE,[2,43]),o($VE,[2,44]),o($VG,[2,32]),o($Vo,[2,88]),o($VE,[2,52]),{11:92,12:$Vr,13:$Vs,14:90,15:83,23:91,36:85,37:$Vt,38:151,39:$Vu,40:$Vv,41:84},o($VF,$Ve,{7:43,6:45,8:152,4:$Vf,5:$Vk}),o($VE,[2,45]),{9:75,10:$V2,11:92,12:$Vr,13:$Vs,14:90,15:83,23:91,36:85,37:$Vt,38:80,39:$Vu,40:$Vv,41:84,42:76,44:153,45:143,46:144,47:82,48:$Vw,54:79,55:78,56:$Vx,57:77,59:$Vh,61:57,62:$Vm,63:$Vn},o($VE,[2,49]),o($VF,$Ve,{7:43,6:45,8:154,4:$Vf,5:$Vk}),o($VE,[2,46])],
defaultActions: {22:[2,80],60:[2,62],61:[2,63],71:[2,71],72:[2,72]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 10;
break;
case 1:return 77;
break;
case 2:return 91;
break;
case 3:return 62;
break;
case 4:return 63;
break;
case 5:return 70;
break;
case 6:return 56;
break;
case 7:return 48;
break;
case 8:return 50;
break;
case 9:return 4;
break;
case 10:return 37;
break;
case 11:return 40;
break;
case 12:return 40;
break;
case 13:return 40;
break;
case 14:return 40;
break;
case 15:return 40;
break;
case 16:return 40;
break;
case 17:return 40;
break;
case 18:return 39;
break;
case 19:return 32;
break;
case 20:return 31;
break;
case 21:return 29;
break;
case 22:return 30;
break;
case 23:return 26;
break;
case 24:return 27;
break;
case 25:return 28;
break;
case 26:return 33;
break;
case 27:return 34;
break;
case 28:return 35;
break;
case 29:return 'RIGHT_OP';
break;
case 30:return 'LEFT_OP';
break;
case 31:return 12;
break;
case 32:return 13;
break;
case 33:return 82;
break;
case 34:return 'AND_OP';
break;
case 35:return 'OR_OP';
break;
case 36:return 'LE_OP';
break;
case 37:return 'GE_OP';
break;
case 38:return 'EQ_OP';
break;
case 39:return 'NE_OP';
break;
case 40:return 5;
break;
case 41: return(';'); 
break;
case 42: return('{'); 
break;
case 43: return('}'); 
break;
case 44: return(','); 
break;
case 45: return(':'); 
break;
case 46: return('='); 
break;
case 47: return('('); 
break;
case 48: return(')'); 
break;
case 49: return('['); 
break;
case 50: return(']'); 
break;
case 51: return('.'); 
break;
case 52: return('&'); 
break;
case 53: return('!'); 
break;
case 54: return('~'); 
break;
case 55: return('-'); 
break;
case 56: return('+'); 
break;
case 57: return('*'); 
break;
case 58: return('/'); 
break;
case 59: return('%'); 
break;
case 60: return('<'); 
break;
case 61: return('>'); 
break;
case 62: return('^'); 
break;
case 63: return('|'); 
break;
case 64: return('?'); 
break;
case 65: 
break;
case 66: /* ignore bad characters */ 
break;
}
},
rules: [/^(?:\/\/(.*))/,/^(?:func\b)/,/^(?:class\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:static\b)/,/^(?:return\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:(\n))/,/^(?:([a-zA-Z_])(([a-zA-Z_])|([0-9]))*)/,/^(?:([0-9])+\.([0-9])*(([Ee][+-]?([0-9])+))?([fFlL])?)/,/^(?:([0-9])*\.([0-9])+(([Ee][+-]?([0-9])+))?([fFlL])?)/,/^(?:0[xX]([a-fA-F0-9])+([uUlL]*)?)/,/^(?:0([0-9])+([uUlL]*)?)/,/^(?:([0-9])+([uUlL]*)?)/,/^(?:L?'(\\'|[^'])+')/,/^(?:([0-9])+([Ee][+-]?([0-9])+)([fFlL])?)/,/^(?:L?"(\\"|[^"])*")/,/^(?:>>=)/,/^(?:<<=)/,/^(?:\+=)/,/^(?:-=)/,/^(?:\*=)/,/^(?:\/=)/,/^(?:%=)/,/^(?:&=)/,/^(?:\^=)/,/^(?:\|=)/,/^(?:>>)/,/^(?:<<)/,/^(?:\+\+)/,/^(?:--)/,/^(?:->)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:!=)/,/^(?:$)/,/^(?:;)/,/^(?:(\{|<%))/,/^(?:(\}|%>))/,/^(?:,)/,/^(?::)/,/^(?:=)/,/^(?:\()/,/^(?:\))/,/^(?:(\[|<:))/,/^(?:(\]|:>))/,/^(?:\.)/,/^(?:&)/,/^(?:!)/,/^(?:~)/,/^(?:-)/,/^(?:\+)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:<)/,/^(?:>)/,/^(?:\^)/,/^(?:\|)/,/^(?:\?)/,/^(?:[ \t\v\r\f])/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = generatedParser;
exports.Parser = generatedParser.Parser;
exports.parse = function () { return generatedParser.parse.apply(generatedParser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}