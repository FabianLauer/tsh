/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var generatedParser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,15],$V1=[1,16],$V2=[1,10],$V3=[1,17],$V4=[1,18],$V5=[1,13],$V6=[1,14],$V7=[1,8],$V8=[1,4,5,10,85,97,101,102,104],$V9=[1,22],$Va=[4,5],$Vb=[1,27],$Vc=[1,29],$Vd=[1,4,5,10,12,13,17,42,45,48,56,58,64,68,70,71,78,85,97,101,102,104],$Ve=[2,93],$Vf=[1,33],$Vg=[18,83],$Vh=[2,86],$Vi=[1,36],$Vj=[2,4],$Vk=[1,39],$Vl=[4,5,10,12,13,17,18,20,21,22,23,24,25,42,45,48,56,58,64,67,68,70,71,78,85],$Vm=[2,40],$Vn=[2,95],$Vo=[1,44],$Vp=[1,46],$Vq=[10,68,70,71,78,85],$Vr=[1,54],$Vs=[1,4,5,10,68,70,71,78,85,97,101,102,104],$Vt=[1,70],$Vu=[1,71],$Vv=[4,10,68,70,71,78,85],$Vw=[10,12,13,17,42,45,48,56,64,68,70,71],$Vx=[1,78],$Vy=[1,109],$Vz=[1,110],$VA=[1,98],$VB=[1,107],$VC=[1,103],$VD=[1,96],$VE=[1,91],$VF=[4,10,12,13,17,42,45,48,56,64,68,70,71],$VG=[4,5,10,12,13,17,42,45,48,56,58,64,68,70,71,78,85],$VH=[2,78],$VI=[1,112],$VJ=[4,5,10,12,13,17,30,42,45,48,56,58,64,68,70,71,78,85],$VK=[4,5,10,68,70,71,78,85],$VL=[4,5,10,12,13,17,42,45,48,56,58,64,68,70,71],$VM=[10,12,13,17,42,45,48,56,58,64,68,70,71],$VN=[1,120],$VO=[1,121],$VP=[1,122],$VQ=[1,123],$VR=[1,124],$VS=[1,125],$VT=[2,44],$VU=[2,37],$VV=[2,14],$VW=[2,23],$VX=[12,13,17,42,45,48],$VY=[1,166],$VZ=[20,21,22,23,24,25],$V_=[4,5,10,12,13,17,18,42,45,48,56,58,64,67,68,70,71,78,85];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"nl_or_eof":3,"NL":4,"EOF":5,"maybe_nl":6,"maybe_nls":7,"maybe_nl_or_eof":8,"comment":9,"SL_COMMENT":10,"unary_operator":11,"INC_OP":12,"DEC_OP":13,"atomic_unary_operation":14,"primary_expr":15,"unary_operation":16,"(":17,")":18,"binary_operator":19,".":20,"+":21,"-":22,"*":23,"/":24,"%":25,"atomic_binary_operation":26,"expression":27,"binary_operation":28,"assignment_operator":29,"=":30,"MUL_ASSIGN":31,"DIV_ASSIGN":32,"MOD_ASSIGN":33,"ADD_ASSIGN":34,"SUB_ASSIGN":35,"LEFT_ASSIGN":36,"RIGHT_ASSIGN":37,"AND_ASSIGN":38,"XOR_ASSIGN":39,"OR_ASSIGN":40,"atomic_assignment_expr":41,"IDENTIFIER":42,"assignment_expr":43,"string_literal":44,"STRING_LITERAL":45,"identifier":46,"atomic_primary_expr":47,"CONSTANT":48,"operation":49,"expression_statement":50,"type_expr":51,"conditional_body":52,"statement":53,"compound_statement":54,"conditional_if_statement":55,"IF":56,"conditional_else_if_statement":57,"ELSE":58,"conditional_maybe_else_if_statements":59,"conditional_else_statement":60,"conditional_maybe_else_statement":61,"conditional_statement":62,"return_statement":63,"RETURN":64,"var_decl":65,"statements":66,"{":67,"}":68,"var_decl_modifier":69,"LET":70,"CONST":71,"var_decl_type_decl":72,":":73,"var_decl_name_and_maybe_type_decl":74,"var_decl_maybe_assignment":75,"var_decl_end":76,"static_var_decl_modifier":77,"STATIC":78,"static_var_decl":79,"param_decl_type_expr":80,"param_decl":81,"param_decl_list":82,",":83,"func_ident":84,"FUNCTION":85,"func_param_decl_list":86,"func_return_expr":87,"ARR":88,"func_body":89,"func_decl_end":90,"func_decl":91,"method_decl":92,"class_body_statement":93,"class_body_statements":94,"class_body_compound_statement":95,"class_ident":96,"CLASS":97,"class_body":98,"class_decl":99,"import_statement":100,"IMPORT":101,"EXPORT":102,"root_grammar":103,"export_statement":104,"root_grammar_list":105,"root":106,"$accept":0,"$end":1},
terminals_: {2:"error",4:"NL",5:"EOF",10:"SL_COMMENT",12:"INC_OP",13:"DEC_OP",17:"(",18:")",20:".",21:"+",22:"-",23:"*",24:"/",25:"%",30:"=",31:"MUL_ASSIGN",32:"DIV_ASSIGN",33:"MOD_ASSIGN",34:"ADD_ASSIGN",35:"SUB_ASSIGN",36:"LEFT_ASSIGN",37:"RIGHT_ASSIGN",38:"AND_ASSIGN",39:"XOR_ASSIGN",40:"OR_ASSIGN",42:"IDENTIFIER",45:"STRING_LITERAL",48:"CONSTANT",56:"IF",58:"ELSE",64:"RETURN",67:"{",68:"}",70:"LET",71:"CONST",73:":",78:"STATIC",83:",",85:"FUNCTION",88:"ARR",97:"CLASS",101:"IMPORT",102:"EXPORT",104:"export_statement"},
productions_: [0,[3,1],[3,1],[6,1],[6,0],[7,1],[7,2],[8,1],[8,1],[9,2],[11,1],[11,1],[14,2],[14,2],[16,1],[16,3],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[26,3],[28,1],[28,3],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[41,3],[43,1],[43,3],[44,1],[46,1],[47,1],[47,1],[47,1],[15,1],[15,3],[49,1],[49,1],[27,1],[27,1],[27,1],[50,2],[51,1],[52,1],[52,1],[55,4],[57,5],[59,1],[59,2],[60,3],[61,1],[61,1],[62,4],[63,3],[53,1],[53,1],[53,1],[53,1],[53,1],[66,1],[66,2],[54,5],[69,1],[69,1],[72,2],[72,0],[74,2],[75,2],[75,0],[76,1],[65,4],[77,2],[77,2],[79,4],[80,2],[80,0],[81,0],[81,2],[82,1],[82,3],[84,2],[86,3],[87,2],[87,0],[89,1],[89,0],[90,1],[91,5],[92,5],[93,1],[93,1],[93,1],[93,1],[94,1],[94,2],[95,5],[96,2],[98,1],[98,0],[99,3],[100,3],[100,3],[103,1],[103,1],[103,1],[103,1],[103,1],[103,1],[105,1],[105,2],[106,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 9:
 this.$ = new yy.Comment([new yy.Token($$[$0-1])]) 
break;
case 10: case 11: case 16: case 17: case 18: case 19: case 20: case 21: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35:
 this.$ = yy.getOperatorFromToken($$[$0]) 
break;
case 12:
 this.$ = new yy.UnaryOperation($$[$0-1], $$[$0], yy.UnaryOperatorPosition.Postfix) 
break;
case 13:
 this.$ = new yy.UnaryOperation($$[$0], $$[$0-1], yy.UnaryOperatorPosition.Prefix) 
break;
case 14: case 23: case 37: case 41: case 43: case 44: case 46: case 47: case 48: case 49: case 50: case 74: case 84: case 92: case 94: case 107: case 118:
 this.$ = $$[$0] 
break;
case 15: case 24: case 38: case 45:
 this.$ = new yy.PrecedenceExpr($$[$0-1]) 
break;
case 22:
 this.$ = new yy.BinaryOperation($$[$0-2], $$[$0-1], $$[$0]) 
break;
case 36:

			var identifierToken = new yy.Token($$[$0-2])
			var identifier = new yy.Identifier(identifierToken)
			this.$ = new yy.BinaryOperation(identifier, $$[$0-1], $$[$0])
		
break;
case 39:

		/*
			We replace the quotes by slicing them away. This is trivial since the quotes
			are *always* the first and last character in the `STRING_LITERAL` terminal.
			The `.trim()` before the `.slice(...)` shouldn't be necessary, but we're
			rather safe than sorry.
		*/
		var content = new yy.Token(($$[$0]).trim().slice(1, -1))
		this.$ = new yy.StringLiteral(content)
	
break;
case 40:
 this.$ = new yy.Identifier(new yy.Token($$[$0])) 
break;
case 42:
 this.$ = new yy.NumericExpr(new yy.Token($$[$0])) 
break;
case 51:
 this.$ = new yy.ExprStatement($$[$0-1]) 
break;
case 52:
 this.$ = yy.TypeExpr.fromIdentifier(new yy.Token($$[$0])) 
break;
case 55:
 this.$ = new yy.IfStatement($$[$0-2], $$[$0-1]) 
break;
case 56:
 this.$ = new yy.ElseIfStatement($$[$0-2], $$[$0-1]) 
break;
case 58:

		this.$ = $$[$0-1] || []
		if (typeof $$[$0] !== 'undefined') {
			this.$ = this.$.concat($$[$0])
		}
	
break;
case 59:
 this.$ = new yy.ElseStatement([$$[$0-1]]) 
break;
case 62:

		var statements = [$$[$0-3]]
		if (Array.isArray($$[$0-2])) {
			statements = statements.concat($$[$0-2])
		}
		if (typeof $$[$0-1] !== 'undefined') {
			statements.push($$[$0-1])
		}
		this.$ = new yy.Statement(statements)
	
break;
case 63:
 this.$ = new yy.ReturnStatement($$[$0-1]) 
break;
case 69: case 103:
 this.$ = [] 
break;
case 70: case 104:

			$$[$0-1] = $$[$0-1] || []
			$$[$0] = $$[$0] || yy.Statement.Empty
			this.$ = $$[$0-1].concat($$[$0])
		
break;
case 71: case 105:

			if ($$[$0-2] === '\n' || $$[$0-2] === '') {
				$$[$0-2] = []
			}
			$$[$0-2] = $$[$0-2] || []
			this.$ = new yy.Statement($$[$0-2])
		
break;
case 72: case 73: case 81: case 82:
 this.$ = yy.getVarDeclModifierByKeyword($$[$0]) 
break;
case 76:
 this.$ = [yy.createToken($$[$0-1]), $$[$0]] 
break;
case 77:
 this.$ = new yy.Expr($$[$0]) 
break;
case 80:

			this.$ = yy.VarDecl.create({
				modifiers: yy.VarDeclModifier.combine($$[$0-3]),
				varName: $$[$0-2][0],
				typeDecl: $$[$0-2][1],
				assignment: $$[$0-1]
			})
		
break;
case 83:

			this.$ = yy.VarDecl.create({
				modifiers: yy.VarDeclModifier.combine(yy.VarDeclModifier.Static, $$[$0-3]),
				varName: $$[$0-2][0],
				typeDecl: $$[$0-2][1],
				assignment: $$[$0-1]
			})
		
break;
case 87:
 this.$ = new yy.ParamDecl(new yy.Token($$[$0-1]), $$[$0]) 
break;
case 88:

			const decls = []
			if (typeof $$[$0] !== 'undefined') {
				decls.push($$[$0])
			}
			this.$ = yy.ParamDeclList.fromParamDecls(decls)
		
break;
case 89:

			this.$ = yy.ParamDeclList.fromParamDecls(
				$$[$0-2].paramDecls.concat($$[$0])
			)
		
break;
case 90: case 106:
 this.$ = yy.createToken($$[$0]) 
break;
case 91:
 this.$ = $$[$0-1] 
break;
case 97:

			this.$ = yy.FuncDecl.create({
				funcName: $$[$0-4],
				runtimeParamDecls: $$[$0-3],
				returnTypeDecl: $$[$0-2],
				funcBody: $$[$0-1]
			})
		
break;
case 98:

			this.$ = yy.MethodDecl.create({
				funcName: $$[$0-4],
				runtimeParamDecls: $$[$0-3],
				returnTypeDecl: $$[$0-2],
				funcBody: $$[$0-1]
			})
		
break;
case 109:

			this.$ = yy.ClassDecl.create({
				className: $$[$0-2],
				classBody: $$[$0-1]
			})
		
break;
case 110:
 this.$ = new yy.ImportStatement($$[$0-1]) 
break;
case 111:
 this.$ = new yy.ExportStatement($$[$0-1]) 
break;
case 119:

			$$[$0-1] = $$[$0-1] || []
			if (!Array.isArray($$[$0-1])) {
				$$[$0-1] = [$$[$0-1]]
			}
			this.$ = $$[$0-1].concat($$[$0])
		
break;
case 120:

	if (Array.isArray($$[$0])) {
		$$[$0] = $$[$0].filter(node => (
			node !== '\n' &&
			node !== ''
		))
		yy.result.push.apply(yy.result, $$[$0])
	} else {
		yy.result.push($$[$0])
	}
	return this.$

break;
}
},
table: [{3:9,4:$V0,5:$V1,9:4,10:$V2,84:11,85:$V3,91:5,96:12,97:$V4,99:6,100:7,101:$V5,102:$V6,103:3,104:$V7,105:2,106:1},{1:[3]},{1:[2,120],3:9,4:$V0,5:$V1,9:4,10:$V2,84:11,85:$V3,91:5,96:12,97:$V4,99:6,100:7,101:$V5,102:$V6,103:19,104:$V7},o($V8,[2,118]),o($V8,[2,112]),o($V8,[2,113]),o($V8,[2,114]),o($V8,[2,115]),o($V8,[2,116]),o($V8,[2,117]),{3:20,4:$V0,5:$V1},{17:$V9,86:21},o($Va,[2,108],{98:23,95:24,67:[1,25]}),{44:26,45:$Vb},{42:$Vc,46:28},o($Vd,[2,1]),o($Vd,[2,2]),{42:[1,30]},{42:[1,31]},o($V8,[2,119]),o($Vd,[2,9]),o([1,4,5,10,67,85,97,101,102,104],$Ve,{87:32,88:$Vf}),o($Vg,$Vh,{82:34,81:35,42:$Vi}),{3:37,4:$V0,5:$V1},o($Va,[2,107]),o([5,10,68,70,71,78,85],$Vj,{6:38,4:$Vk}),{3:40,4:$V0,5:$V1},o($Vl,[2,39]),{3:41,4:$V0,5:$V1},o($Vl,$Vm),{17:[2,90]},o([4,5,67],[2,106]),o($V8,$Vn,{89:42,54:43,67:$Vo}),{42:$Vp,51:45},{18:[1,47],83:[1,48]},o($Vg,[2,88]),o($Vg,[2,85],{80:49,73:[1,50]}),o($V8,[2,109]),o($Vq,$Vj,{94:51,8:52,7:53,6:55,4:$Vk,5:$Vr}),o($Vd,[2,3]),o($V8,[2,110]),o($V8,[2,111]),o([1,10,85,97,101,102,104],$Vj,{7:53,6:55,90:56,8:57,4:$Vk,5:$Vr}),o($Vs,[2,94]),o([5,10,12,13,17,42,45,48,56,64,68,70,71],$Vj,{6:58,4:$Vk}),o([1,4,5,10,67,68,70,71,78,85,97,101,102,104],[2,92]),o([1,4,5,10,12,13,17,18,30,42,45,48,56,58,64,67,68,70,71,78,83,85,97,101,102,104],[2,52]),o([1,4,5,10,67,68,70,71,78,85,88,97,101,102,104],[2,91]),o($Vg,$Vh,{81:59,42:$Vi}),o($Vg,[2,87]),{42:$Vp,51:60},{4:$Vk,6:61,9:63,10:$V2,65:64,68:$Vj,69:67,70:$Vt,71:$Vu,77:68,78:[1,72],79:65,84:69,85:$V3,92:66,93:62},o($Vv,[2,103]),o([1,5,10,12,13,17,42,45,48,56,58,64,68,70,71,78,85,97,101,102,104],[2,7],{6:73,4:$Vk}),o($Vd,[2,8]),o($Vd,[2,5]),o($V8,[2,97]),o($Vs,[2,96]),o($Vw,$Vj,{7:53,6:55,66:74,8:75,4:$Vk,5:$Vr}),o($Vg,[2,89]),o($Vg,[2,84]),{68:[1,76]},o($Vv,[2,104]),o($Vv,[2,99]),o($Vv,[2,100]),o($Vv,[2,101]),o($Vv,[2,102]),{42:$Vx,74:77},{42:$Vx,74:79},{17:$V9,86:80},{42:[2,72]},{42:[2,73]},{70:[1,81],71:[1,82]},o($Vd,[2,6]),{4:$Vk,6:83,9:85,10:$V2,11:108,12:$Vy,13:$Vz,14:105,15:93,16:99,17:$VA,26:106,27:90,28:100,41:101,42:$VB,43:95,44:104,45:$Vb,46:102,47:97,48:$VC,49:94,50:86,53:84,55:92,56:$VD,62:89,63:88,64:$VE,65:87,68:$Vj,69:67,70:$Vt,71:$Vu},o($VF,[2,69]),o($Va,[2,105]),o($VG,$VH,{75:111,30:$VI}),o($VJ,[2,75],{72:113,73:[1,114]}),o($VK,$VH,{75:115,30:$VI}),o([4,5,10,67,68,70,71,78,85],$Ve,{87:116,88:$Vf}),{42:[2,81]},{42:[2,82]},{68:[1,117]},o($VF,[2,70]),o($VL,[2,64]),o($VL,[2,65]),o($VL,[2,66]),o($VL,[2,67]),o($VL,[2,68]),o($VM,$Vj,{7:53,6:55,8:118,19:119,4:$Vk,5:$Vr,20:$VN,21:$VO,22:$VP,23:$VQ,24:$VR,25:$VS}),{11:108,12:$Vy,13:$Vz,14:105,15:93,16:99,17:$VA,26:106,27:126,28:100,41:101,42:$VB,43:95,44:104,45:$Vb,46:102,47:97,48:$VC,49:94},o($VM,$Vj,{7:53,6:55,59:127,8:128,4:$Vk,5:$Vr}),o([4,5,10,17,18,20,21,22,23,24,25,42,45,48,56,58,64,67,68,70,71,78,85],[2,48],{11:129,12:$Vy,13:$Vz}),o($Vl,[2,49]),o($Vl,[2,50]),{11:108,12:$Vy,13:$Vz,14:105,15:93,16:99,17:$VA,26:106,27:130,28:100,41:101,42:$VB,43:95,44:104,45:$Vb,46:102,47:97,48:$VC,49:94},o($Vl,$VT),{11:108,12:$Vy,13:$Vz,14:133,15:93,16:99,17:$VA,26:134,27:135,28:100,41:132,42:$VB,43:95,44:104,45:$Vb,46:102,47:131,48:$VC,49:94},o($Vl,[2,46]),o($Vl,[2,47]),o($Vl,$VU),o($Vl,[2,41]),o($Vl,[2,42]),o($Vl,[2,43]),o($Vl,$VV),o($Vl,$VW),o($Vl,$Vm,{29:136,30:[1,137],31:[1,138],32:[1,139],33:[1,140],34:[1,141],35:[1,142],36:[1,143],37:[1,144],38:[1,145],39:[1,146],40:[1,147]}),{15:148,17:[1,149],42:$Vc,44:104,45:$Vb,46:102,47:97,48:$VC},o($Vl,[2,10]),o($Vl,[2,11]),o([10,12,13,17,42,45,48,56,58,64,68,70,71,78,85],$Vj,{7:53,6:55,76:150,8:151,4:$Vk,5:$Vr}),{11:108,12:$Vy,13:$Vz,14:105,15:93,16:99,17:$VA,26:106,27:152,28:100,41:101,42:$VB,43:95,44:104,45:$Vb,46:102,47:97,48:$VC,49:94},o($VJ,[2,76]),{42:$Vp,51:153},o($Vq,$Vj,{7:53,6:55,8:151,76:154,4:$Vk,5:$Vr}),o($VK,$Vn,{54:43,89:155,67:$Vo}),o($Vd,[2,71]),o($VL,[2,51]),{11:108,12:$Vy,13:$Vz,14:105,15:93,16:99,17:$VA,26:106,27:156,28:100,41:101,42:$VB,43:95,44:104,45:$Vb,46:102,47:97,48:$VC,49:94},o($VX,[2,16]),o($VX,[2,17]),o($VX,[2,18]),o($VX,[2,19]),o($VX,[2,20]),o($VX,[2,21]),o($VM,$Vj,{7:53,6:55,19:119,8:157,4:$Vk,5:$Vr,20:$VN,21:$VO,22:$VP,23:$VQ,24:$VR,25:$VS}),o($Vw,$Vj,{7:53,6:55,61:158,57:159,60:160,8:161,4:$Vk,5:$Vr,58:[1,162]}),o($VL,[2,57]),o($Vl,[2,12]),{9:85,10:$V2,11:108,12:$Vy,13:$Vz,14:105,15:93,16:99,17:$VA,19:119,20:$VN,21:$VO,22:$VP,23:$VQ,24:$VR,25:$VS,26:106,27:90,28:100,41:101,42:$VB,43:95,44:104,45:$Vb,46:102,47:97,48:$VC,49:94,50:86,52:163,53:164,54:165,55:92,56:$VD,62:89,63:88,64:$VE,65:87,67:$Vo,69:67,70:$Vt,71:$Vu},o([12,13,20,21,22,23,24,25],$VT,{18:$VY}),o($VZ,$VU,{18:[1,167]}),o($VZ,$VV,{18:[1,168]}),o($VZ,$VW,{18:[1,169]}),{19:119,20:$VN,21:$VO,22:$VP,23:$VQ,24:$VR,25:$VS},{11:108,12:$Vy,13:$Vz,14:105,15:93,16:99,17:$VA,26:106,27:170,28:100,41:101,42:$VB,43:95,44:104,45:$Vb,46:102,47:97,48:$VC,49:94},o($VX,[2,25]),o($VX,[2,26]),o($VX,[2,27]),o($VX,[2,28]),o($VX,[2,29]),o($VX,[2,30]),o($VX,[2,31]),o($VX,[2,32]),o($VX,[2,33]),o($VX,[2,34]),o($VX,[2,35]),o($Vl,[2,13]),{42:$Vc,44:104,45:$Vb,46:102,47:171,48:$VC},o($VG,[2,80]),o($VG,[2,79]),o($VG,[2,77],{19:119,20:$VN,21:$VO,22:$VP,23:$VQ,24:$VR,25:$VS}),o($VJ,[2,74]),o($Vv,[2,83]),o($Vq,$Vj,{7:53,6:55,8:57,90:172,4:$Vk,5:$Vr}),o($V_,[2,22],{19:119,20:$VN,21:$VO,22:$VP,23:$VQ,24:$VR,25:$VS}),o($VL,[2,63]),o($VM,$Vj,{7:53,6:55,8:173,4:$Vk,5:$Vr}),o($VL,[2,58]),o($VL,[2,60]),o($VL,[2,61]),{9:85,10:$V2,11:108,12:$Vy,13:$Vz,14:105,15:93,16:99,17:$VA,26:106,27:90,28:100,41:101,42:$VB,43:95,44:104,45:$Vb,46:102,47:97,48:$VC,49:94,50:86,52:175,53:164,54:165,55:92,56:[1,174],62:89,63:88,64:$VE,65:87,67:$Vo,69:67,70:$Vt,71:$Vu},o($VM,$Vj,{7:53,6:55,8:176,4:$Vk,5:$Vr}),o($VL,[2,53]),o($VL,[2,54]),o($Vl,[2,45]),o($Vl,[2,38]),o($Vl,[2,15]),o($Vl,[2,24]),o($V_,[2,36],{19:119,20:$VN,21:$VO,22:$VP,23:$VQ,24:$VR,25:$VS}),{18:$VY},o($Vv,[2,98]),o($VL,[2,62]),{11:108,12:$Vy,13:$Vz,14:105,15:93,16:99,17:$VA,26:106,27:177,28:100,41:101,42:$VB,43:95,44:104,45:$Vb,46:102,47:97,48:$VC,49:94},o($VM,$Vj,{7:53,6:55,8:178,4:$Vk,5:$Vr}),o($VL,[2,55]),{9:85,10:$V2,11:108,12:$Vy,13:$Vz,14:105,15:93,16:99,17:$VA,19:119,20:$VN,21:$VO,22:$VP,23:$VQ,24:$VR,25:$VS,26:106,27:90,28:100,41:101,42:$VB,43:95,44:104,45:$Vb,46:102,47:97,48:$VC,49:94,50:86,52:179,53:164,54:165,55:92,56:$VD,62:89,63:88,64:$VE,65:87,67:$Vo,69:67,70:$Vt,71:$Vu},o($VL,[2,59]),o($VM,$Vj,{7:53,6:55,8:180,4:$Vk,5:$Vr}),o($VL,[2,56])],
defaultActions: {30:[2,90],70:[2,72],71:[2,73],81:[2,81],82:[2,82]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 10;
break;
case 1:return 101;
break;
case 2:return 102;
break;
case 3:return 85;
break;
case 4:return 97;
break;
case 5:return 70;
break;
case 6:return 71;
break;
case 7:return 78;
break;
case 8:return 64;
break;
case 9:return 56;
break;
case 10:return 58;
break;
case 11:return 4;
break;
case 12:return 42;
break;
case 13:return 48;
break;
case 14:return 48;
break;
case 15:return 48;
break;
case 16:return 48;
break;
case 17:return 48;
break;
case 18:return 48;
break;
case 19:return 48;
break;
case 20:return 45;
break;
case 21:return 37;
break;
case 22:return 36;
break;
case 23:return 34;
break;
case 24:return 35;
break;
case 25:return 31;
break;
case 26:return 32;
break;
case 27:return 33;
break;
case 28:return 38;
break;
case 29:return 39;
break;
case 30:return 40;
break;
case 31:return 'RIGHT_OP';
break;
case 32:return 'LEFT_OP';
break;
case 33:return 12;
break;
case 34:return 13;
break;
case 35:return 88;
break;
case 36:return 'AND_OP';
break;
case 37:return 'OR_OP';
break;
case 38:return 'LE_OP';
break;
case 39:return 'GE_OP';
break;
case 40:return 'EQ_OP';
break;
case 41:return 'NE_OP';
break;
case 42:return 5;
break;
case 43: return(';'); 
break;
case 44: return('{'); 
break;
case 45: return('}'); 
break;
case 46: return(','); 
break;
case 47: return(':'); 
break;
case 48: return('='); 
break;
case 49: return('('); 
break;
case 50: return(')'); 
break;
case 51: return('['); 
break;
case 52: return(']'); 
break;
case 53: return('.'); 
break;
case 54: return('&'); 
break;
case 55: return('!'); 
break;
case 56: return('~'); 
break;
case 57: return('-'); 
break;
case 58: return('+'); 
break;
case 59: return('*'); 
break;
case 60: return('/'); 
break;
case 61: return('%'); 
break;
case 62: return('<'); 
break;
case 63: return('>'); 
break;
case 64: return('^'); 
break;
case 65: return('|'); 
break;
case 66: return('?'); 
break;
case 67: 
break;
case 68: /* ignore bad characters */ 
break;
}
},
rules: [/^(?:\/\/(.*))/,/^(?:import\b)/,/^(?:export\b)/,/^(?:func\b)/,/^(?:class\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:static\b)/,/^(?:return\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:(\n))/,/^(?:([a-zA-Z_])(([a-zA-Z_])|([0-9]))*)/,/^(?:([0-9])+\.([0-9])*(([Ee][+-]?([0-9])+))?([fFlL])?)/,/^(?:([0-9])*\.([0-9])+(([Ee][+-]?([0-9])+))?([fFlL])?)/,/^(?:0[xX]([a-fA-F0-9])+([uUlL]*)?)/,/^(?:0([0-9])+([uUlL]*)?)/,/^(?:([0-9])+([uUlL]*)?)/,/^(?:L?'(\\'|[^'])+')/,/^(?:([0-9])+([Ee][+-]?([0-9])+)([fFlL])?)/,/^(?:L?"(\\"|[^"])*")/,/^(?:>>=)/,/^(?:<<=)/,/^(?:\+=)/,/^(?:-=)/,/^(?:\*=)/,/^(?:\/=)/,/^(?:%=)/,/^(?:&=)/,/^(?:\^=)/,/^(?:\|=)/,/^(?:>>)/,/^(?:<<)/,/^(?:\+\+)/,/^(?:--)/,/^(?:->)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:!=)/,/^(?:$)/,/^(?:;)/,/^(?:(\{|<%))/,/^(?:(\}|%>))/,/^(?:,)/,/^(?::)/,/^(?:=)/,/^(?:\()/,/^(?:\))/,/^(?:(\[|<:))/,/^(?:(\]|:>))/,/^(?:\.)/,/^(?:&)/,/^(?:!)/,/^(?:~)/,/^(?:-)/,/^(?:\+)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:<)/,/^(?:>)/,/^(?:\^)/,/^(?:\|)/,/^(?:\?)/,/^(?:[ \t\v\r\f])/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = generatedParser;
exports.Parser = generatedParser.Parser;
exports.parse = function () { return generatedParser.parse.apply(generatedParser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}