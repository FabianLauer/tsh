/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var generatedParser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,17],$V1=[1,18],$V2=[1,11],$V3=[1,19],$V4=[1,20],$V5=[1,21],$V6=[1,15],$V7=[1,16],$V8=[1,9],$V9=[1,4,5,10,108,121,130,133,134,136],$Va=[1,25],$Vb=[4,5],$Vc=[1,32],$Vd=[1,34],$Ve=[1,4,5,10,12,13,17,55,56,58,70,72,79,82,84,88,92,94,95,102,108,121,130,133,134,136],$Vf=[2,124],$Vg=[1,39],$Vh=[18,63],$Vi=[2,117],$Vj=[1,42],$Vk=[2,4],$Vl=[1,45],$Vm=[4,5,10,12,13,17,18,20,21,22,23,24,25,26,27,28,29,30,31,32,33,55,56,58,63,70,72,79,82,84,88,91,92,94,95,102,108],$Vn=[2,126],$Vo=[1,52],$Vp=[1,54],$Vq=[10,92,94,95,102,108],$Vr=[1,62],$Vs=[1,4,5,10,12,13,17,18,20,21,22,23,24,25,26,27,28,29,30,31,32,33,55,56,58,63,70,72,79,82,84,88,91,92,94,95,102,108,121,130,133,134,136],$Vt=[1,80],$Vu=[1,81],$Vv=[4,10,92,94,95,102,108],$Vw=[1,89],$Vx=[4,10,56,92],$Vy=[1,94],$Vz=[1,100],$VA=[4,10,56,63,92],$VB=[1,139],$VC=[1,140],$VD=[1,118],$VE=[1,132],$VF=[1,119],$VG=[1,115],$VH=[1,120],$VI=[1,113],$VJ=[1,138],$VK=[4,10,12,13,17,55,56,58,70,79,82,88,92,94,95,108],$VL=[4,5,10,12,13,17,55,56,58,70,72,79,82,84,88,92,94,95,102,108],$VM=[2,109],$VN=[1,142],$VO=[4,5,10,12,13,17,39,55,56,58,70,72,79,82,84,88,92,94,95,102,108],$VP=[4,5,10,92,94,95,102,108],$VQ=[4,5,10,12,13,17,55,56,58,70,72,79,82,84,88,92,94,95,108],$VR=[10,12,13,17,55,56,58,70,72,79,82,84,88,92,94,95,108],$VS=[1,150],$VT=[1,153],$VU=[4,5,10,12,13,17,18,55,56,58,63,70,72,79,82,84,88,92,94,95,108],$VV=[1,160],$VW=[1,161],$VX=[1,162],$VY=[1,163],$VZ=[1,164],$V_=[1,165],$V$=[1,166],$V01=[1,167],$V11=[1,168],$V21=[1,169],$V31=[1,170],$V41=[1,171],$V51=[1,172],$V61=[1,173],$V71=[2,56],$V81=[2,47],$V91=[2,53],$Va1=[2,58],$Vb1=[2,14],$Vc1=[2,32],$Vd1=[12,13,17,55,56,58,108],$Ve1=[1,227],$Vf1=[20,21,22,23,24,25,26,27,28,29,30,31,32,33,63],$Vg1=[4,5,10,12,13,17,18,55,56,58,63,70,72,79,82,84,88,91,92,94,95,102,108];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"nl_or_eof":3,"NL":4,"EOF":5,"maybe_nl":6,"maybe_nls":7,"maybe_nl_or_eof":8,"comment":9,"SL_COMMENT":10,"unary_operator":11,"INC_OP":12,"DEC_OP":13,"atomic_unary_operation":14,"primary_expr":15,"unary_operation":16,"(":17,")":18,"binary_operator":19,".":20,"+":21,"-":22,"*":23,"/":24,"%":25,"EQ_OP":26,"NE_OP":27,"LE_OP":28,"GE_OP":29,"<":30,">":31,"AND_OP":32,"OR_OP":33,"atomic_binary_operation":34,"expression":35,"precedence_expr_list":36,"binary_operation":37,"assignment_operator":38,"=":39,"MUL_ASSIGN":40,"DIV_ASSIGN":41,"MOD_ASSIGN":42,"ADD_ASSIGN":43,"SUB_ASSIGN":44,"LEFT_ASSIGN":45,"RIGHT_ASSIGN":46,"AND_ASSIGN":47,"XOR_ASSIGN":48,"OR_ASSIGN":49,"atomic_assignment_expr":50,"identifier":51,"assignment_expr":52,"func_call_expr":53,"string_literal":54,"STRING_LITERAL":55,"IDENTIFIER":56,"atomic_primary_expr":57,"CONSTANT":58,"anon_func_expr":59,"anon_func_decl":60,"operation":61,"expr_list":62,",":63,"expression_statement":64,"type_expr":65,"conditional_body":66,"statement":67,"compound_statement":68,"conditional_if_statement":69,"IF":70,"conditional_else_if_statement":71,"ELSE":72,"conditional_maybe_else_if_statements":73,"conditional_else_statement":74,"conditional_maybe_else_statement":75,"conditional_statement":76,"while_body":77,"while_statement":78,"WHILE":79,"try_catch_body":80,"try_statement":81,"TRY":82,"catch_statement":83,"CATCH":84,"AS":85,"try_catch_statement":86,"return_statement":87,"RETURN":88,"var_decl":89,"statements":90,"{":91,"}":92,"var_decl_modifier":93,"LET":94,"CONST":95,"var_decl_type_decl":96,":":97,"var_decl_name_and_maybe_type_decl":98,"var_decl_maybe_assignment":99,"var_decl_end":100,"static_var_decl_modifier":101,"STATIC":102,"static_var_decl":103,"param_decl_type_expr":104,"param_decl":105,"param_decl_list":106,"func_ident":107,"FUNCTION":108,"func_param_decl_list":109,"func_return_expr":110,"ARR":111,"func_body":112,"func_decl_end":113,"func_decl":114,"anon_func_ident":115,"method_decl":116,"class_body_statement":117,"class_body_statements":118,"class_body_compound_statement":119,"class_ident":120,"CLASS":121,"class_body":122,"class_decl":123,"enum_member_decl":124,"enum_member_decl_list":125,"enum_body_statement":126,"enum_body_statements":127,"enum_body_compound_statement":128,"enum_ident":129,"ENUM":130,"enum_decl":131,"import_statement":132,"IMPORT":133,"EXPORT":134,"root_grammar":135,"export_statement":136,"root_grammar_list":137,"root":138,"$accept":0,"$end":1},
terminals_: {2:"error",4:"NL",5:"EOF",10:"SL_COMMENT",12:"INC_OP",13:"DEC_OP",17:"(",18:")",20:".",21:"+",22:"-",23:"*",24:"/",25:"%",26:"EQ_OP",27:"NE_OP",28:"LE_OP",29:"GE_OP",30:"<",31:">",32:"AND_OP",33:"OR_OP",39:"=",40:"MUL_ASSIGN",41:"DIV_ASSIGN",42:"MOD_ASSIGN",43:"ADD_ASSIGN",44:"SUB_ASSIGN",45:"LEFT_ASSIGN",46:"RIGHT_ASSIGN",47:"AND_ASSIGN",48:"XOR_ASSIGN",49:"OR_ASSIGN",55:"STRING_LITERAL",56:"IDENTIFIER",58:"CONSTANT",63:",",70:"IF",72:"ELSE",79:"WHILE",82:"TRY",84:"CATCH",85:"AS",88:"RETURN",91:"{",92:"}",94:"LET",95:"CONST",97:":",102:"STATIC",108:"FUNCTION",111:"ARR",121:"CLASS",130:"ENUM",133:"IMPORT",134:"EXPORT",136:"export_statement"},
productions_: [0,[3,1],[3,1],[6,1],[6,0],[7,1],[7,2],[8,1],[8,1],[9,2],[11,1],[11,1],[14,2],[14,2],[16,1],[16,3],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[34,3],[34,3],[37,1],[37,3],[38,1],[38,1],[38,1],[38,1],[38,1],[38,1],[38,1],[38,1],[38,1],[38,1],[38,1],[50,3],[50,3],[52,1],[52,3],[53,3],[53,2],[54,1],[51,1],[57,1],[57,1],[57,1],[15,1],[15,3],[59,1],[59,3],[61,1],[61,1],[35,1],[35,1],[35,1],[35,1],[35,1],[62,1],[62,3],[36,3],[64,2],[64,2],[65,1],[66,1],[66,1],[69,4],[71,5],[73,1],[73,2],[74,3],[75,1],[75,1],[76,4],[77,1],[77,1],[78,4],[80,1],[80,1],[81,3],[83,3],[83,5],[86,2],[87,3],[67,1],[67,1],[67,1],[67,1],[67,1],[67,1],[67,1],[90,1],[90,2],[68,5],[93,1],[93,1],[96,2],[96,0],[98,2],[99,2],[99,0],[100,1],[89,4],[101,2],[101,2],[103,4],[104,2],[104,0],[105,0],[105,2],[106,1],[106,3],[107,2],[109,3],[110,2],[110,0],[112,1],[112,0],[113,1],[114,5],[115,1],[60,5],[116,5],[117,1],[117,1],[117,1],[117,1],[118,1],[118,2],[119,5],[120,2],[122,1],[122,0],[123,3],[124,1],[124,2],[125,1],[125,4],[126,1],[126,1],[126,1],[127,1],[127,2],[128,5],[129,2],[131,3],[132,3],[132,3],[135,1],[135,1],[135,1],[135,1],[135,1],[135,1],[135,1],[137,1],[137,2],[138,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 9:

	const commentContent = new yy.Token(
		$$[$0-1],
		_$[$0-1].first_line, _$[$0-1].first_column,
		_$[$0-1].last_line, _$[$0-1].last_column
	)
	this.$ = new yy.Comment([commentContent])

break;
case 10: case 11: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 26: case 27: case 28: case 29: case 34: case 35: case 36: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44:
 this.$ = yy.getOperatorFromToken($$[$0]) 
break;
case 12:
 this.$ = new yy.UnaryOperation($$[$0-1], $$[$0], yy.UnaryOperatorPosition.Postfix) 
break;
case 13:
 this.$ = new yy.UnaryOperation($$[$0], $$[$0-1], yy.UnaryOperatorPosition.Prefix) 
break;
case 14: case 32: case 47: case 53: case 55: case 56: case 58: case 60: case 61: case 62: case 63: case 64: case 65: case 66: case 105: case 115: case 123: case 125: case 140: case 164:
 this.$ = $$[$0] 
break;
case 15: case 33: case 48: case 57: case 59:
 this.$ = new yy.PrecedenceExpr($$[$0-1]) 
break;
case 30: case 31: case 45: case 46:
 this.$ = new yy.BinaryOperation($$[$0-2], $$[$0-1], $$[$0]) 
break;
case 49:
 this.$ = new yy.FuncCall($$[$0-2], new yy.ExprList([])) 
break;
case 50:

			var params;
			if ($$[$0].expr instanceof yy.ExprList) {
				params = new yy.ExprList($$[$0].expr.expressions)
			} else {
				params = new yy.ExprList([$$[$0].expr])
			}
			this.$ = new yy.FuncCall($$[$0-1], params)
		
break;
case 51:

		/*
			We replace the quotes by slicing them away. This is trivial since the quotes
			are *always* the first and last character in the `STRING_LITERAL` terminal.
			The `.trim()` before the `.slice(...)` shouldn't be necessary, but we're
			rather safe than sorry.
		*/
		const stringLiteralContent = new yy.Token(
			($$[$0]).trim().slice(1, -1),
			_$[$0].first_line, _$[$0].first_column,
			_$[$0].last_line, _$[$0].last_column
		)
		this.$ = new yy.StringLiteral(stringLiteralContent)
	
break;
case 52:

	const identifierContent = new yy.Token(
		$$[$0],
		_$[$0].first_line, _$[$0].first_column,
		_$[$0].last_line, _$[$0].last_column
	)
	this.$ = new yy.Identifier(identifierContent)

break;
case 54:

		const atomicPrimaryExprContent = new yy.Token(
			$$[$0],
			_$[$0].first_line, _$[$0].first_column,
			_$[$0].last_line, _$[$0].last_column
		)
		this.$ = new yy.NumericExpr(atomicPrimaryExprContent)
	
break;
case 67:

			const exprs = []
			if (typeof $$[$0] !== 'undefined') {
				exprs.push($$[$0])
			}
			this.$ = new yy.ExprList(exprs)
		
break;
case 68:

			this.$ = new yy.ExprList($$[$0-2].expressions.concat($$[$0]))
		
break;
case 69:

		if ($$[$0-1].expressions.length === 1) {
			this.$ = new yy.PrecedenceExpr($$[$0-1].expressions[0])
		} else {
			this.$ = new yy.PrecedenceExpr($$[$0-1])
		}
	
break;
case 70:

		if ($$[$0-1].expressions.length === 1) {
			this.$ = new yy.ExprStatement($$[$0-1].expressions[0])
		} else {
			this.$ = new yy.ExprStatement($$[$0-1])
		}
	
break;
case 71:
 this.$ = new yy.ExprStatement($$[$0-1]) 
break;
case 72:

		const typeExprIdentifierContent = new yy.Token(
			$$[$0],
			_$[$0].first_line, _$[$0].first_column,
			_$[$0].last_line, _$[$0].last_column
		)
		this.$ = yy.TypeExpr.fromIdentifier(typeExprIdentifierContent)
	
break;
case 75:
 this.$ = new yy.IfStatement($$[$0-2], $$[$0-1]) 
break;
case 76:
 this.$ = new yy.ElseIfStatement($$[$0-2], $$[$0-1]) 
break;
case 78:

		this.$ = $$[$0-1] || []
		if (typeof $$[$0] !== 'undefined') {
			this.$ = this.$.concat($$[$0])
		}
	
break;
case 79:
 this.$ = new yy.ElseStatement([$$[$0-1]]) 
break;
case 82:

		var statements = [$$[$0-3]]
		if (Array.isArray($$[$0-2])) {
			statements = statements.concat($$[$0-2])
		}
		if (typeof $$[$0-1] !== 'undefined') {
			statements.push($$[$0-1])
		}
		this.$ = new yy.Statement(statements)
	
break;
case 85:
 this.$ = new yy.WhileStatement(new yy.ExprList([$$[$0-2]]), new yy.Statement([$$[$0-1]])) 
break;
case 88: case 122:
 this.$ = $$[$0-1] 
break;
case 89:

			this.$ = {
				errorHandlerStatement: $$[$0-1],
				errorIdentifier: undefined
			}
		
break;
case 90:

			this.$ = {
				errorHandlerStatement: $$[$0-1],
				errorIdentifier: $$[$0-2]
			}
		
break;
case 91:

		this.$ = new yy.TryCatchStatement(
			$$[$0-1],
			$$[$0].errorHandlerStatement,
			$$[$0].errorIdentifier
		)
	
break;
case 92:
 this.$ = new yy.ReturnStatement($$[$0-1]) 
break;
case 100: case 136: case 150:
 this.$ = [] 
break;
case 101: case 137: case 151:

			$$[$0-1] = $$[$0-1] || []
			$$[$0] = $$[$0] || yy.Statement.Empty
			this.$ = $$[$0-1].concat($$[$0])
		
break;
case 102: case 138:

			if ($$[$0-2] === '\n' || $$[$0-2] === '') {
				$$[$0-2] = []
			}
			$$[$0-2] = $$[$0-2] || []
			this.$ = new yy.Statement($$[$0-2])
		
break;
case 103: case 104: case 112: case 113:
 this.$ = yy.getVarDeclModifierByKeyword($$[$0]) 
break;
case 107:

	const identifierToken = new yy.Token(
		$$[$0-1],
		_$[$0-1].first_line, _$[$0-1].first_column,
		_$[$0-1].last_line, _$[$0-1].last_column
	)
	this.$ = [identifierToken, $$[$0]]

break;
case 108:
 this.$ = new yy.Expr($$[$0]) 
break;
case 111:

			this.$ = yy.VarDecl.create({
				modifiers: yy.VarDeclModifier.combine($$[$0-3]),
				varName: $$[$0-2][0],
				typeDecl: $$[$0-2][1],
				assignment: $$[$0-1]
			})
		
break;
case 114:

			this.$ = yy.VarDecl.create({
				modifiers: yy.VarDeclModifier.combine(yy.VarDeclModifier.Static, $$[$0-3]),
				varName: $$[$0-2][0],
				typeDecl: $$[$0-2][1],
				assignment: $$[$0-1]
			})
		
break;
case 118:

				const nameToken = new yy.Token(
					$$[$0-1],
					_$[$0-1].first_line, _$[$0-1].first_column,
					_$[$0-1].last_line, _$[$0-1].last_column
				)
				this.$ = new yy.ParamDecl(nameToken, $$[$0])
			
break;
case 119:

			var decls = []
			if (typeof $$[$0] !== 'undefined') {
				decls.push($$[$0])
			}
			this.$ = yy.ParamDeclList.fromParamDecls(decls)
		
break;
case 120:

			this.$ = yy.ParamDeclList.fromParamDecls(
				$$[$0-2].paramDecls.concat($$[$0])
			)
		
break;
case 121: case 139: case 153:

	this.$ = new yy.Token(
		$$[$0],
		_$[$0].first_line, _$[$0].first_column,
		_$[$0].last_line, _$[$0].last_column
	)

break;
case 128:

			this.$ = yy.FuncDecl.create({
				funcName: $$[$0-4],
				runtimeParamDecls: $$[$0-3],
				returnTypeDecl: $$[$0-2],
				funcBody: $$[$0-1]
			})
		
break;
case 130:

			this.$ = yy.AnonFuncDecl.create({
				runtimeParamDecls: $$[$0-3],
				returnTypeDecl: $$[$0-2],
				funcBody: $$[$0-1]
			})
		
break;
case 131:

			this.$ = yy.MethodDecl.create({
				funcName: $$[$0-4],
				runtimeParamDecls: $$[$0-3],
				returnTypeDecl: $$[$0-2],
				funcBody: $$[$0-1]
			})
		
break;
case 142:

			this.$ = yy.ClassDecl.create({
				className: $$[$0-2],
				classBody: $$[$0-1]
			})
		
break;
case 143: case 144:
 this.$ = new yy.EnumMemberDecl(new yy.Token($$[$0])) 
break;
case 145:

			var decls = []
			if (typeof $$[$0] !== 'undefined') {
				decls.push($$[$0])
			}
			this.$ = new yy.Statement(decls)
		
break;
case 146:
 this.$ = new yy.Statement([...$$[$0-3].nodes, $$[$0]]) 
break;
case 152:

		var nodes = []
		$$[$0-2].forEach(commentOrStatement => {
			if (commentOrStatement instanceof yy.Statement) {
				nodes.push(...commentOrStatement.nodes)
			} else {
				nodes.push(commentOrStatement)
			}
		})
		this.$ = new yy.Statement(nodes)
	
break;
case 154:

			this.$ = yy.EnumDecl.create({
				enumName: $$[$0-2],
				enumBody: $$[$0-1]
			})
		
break;
case 155:
 this.$ = new yy.ImportStatement($$[$0-1]) 
break;
case 156:
 this.$ = new yy.ExportStatement($$[$0-1]) 
break;
case 165:

			$$[$0-1] = $$[$0-1] || []
			if (!Array.isArray($$[$0-1])) {
				$$[$0-1] = [$$[$0-1]]
			}
			this.$ = $$[$0-1].concat($$[$0])
		
break;
case 166:

	if (Array.isArray($$[$0])) {
		$$[$0] = $$[$0].filter(node => (
			node !== '\n' &&
			node !== ''
		))
		yy.result.push.apply(yy.result, $$[$0])
	} else {
		yy.result.push($$[$0])
	}
	return this.$

break;
}
},
table: [{3:10,4:$V0,5:$V1,9:4,10:$V2,107:12,108:$V3,114:5,120:13,121:$V4,123:6,129:14,130:$V5,131:7,132:8,133:$V6,134:$V7,135:3,136:$V8,137:2,138:1},{1:[3]},{1:[2,166],3:10,4:$V0,5:$V1,9:4,10:$V2,107:12,108:$V3,114:5,120:13,121:$V4,123:6,129:14,130:$V5,131:7,132:8,133:$V6,134:$V7,135:22,136:$V8},o($V9,[2,164]),o($V9,[2,157]),o($V9,[2,158]),o($V9,[2,159]),o($V9,[2,160]),o($V9,[2,161]),o($V9,[2,162]),o($V9,[2,163]),{3:23,4:$V0,5:$V1},{17:$Va,109:24},o($Vb,[2,141],{122:26,119:27,91:[1,28]}),{91:[1,30],128:29},{54:31,55:$Vc},{51:33,56:$Vd},o($Ve,[2,1]),o($Ve,[2,2]),{56:[1,35]},{56:[1,36]},{56:[1,37]},o($V9,[2,165]),o($Ve,[2,9]),o([1,4,5,10,91,108,121,130,133,134,136],$Vf,{110:38,111:$Vg}),o($Vh,$Vi,{106:40,105:41,56:$Vj}),{3:43,4:$V0,5:$V1},o($Vb,[2,140]),o([5,10,92,94,95,102,108],$Vk,{6:44,4:$Vl}),{3:46,4:$V0,5:$V1},o([5,10,56,92],$Vk,{6:47,4:$Vl}),{3:48,4:$V0,5:$V1},o($Vm,[2,51]),{3:49,4:$V0,5:$V1},o([4,5,10,12,13,17,18,20,21,22,23,24,25,26,27,28,29,30,31,32,33,39,40,41,42,43,44,45,46,47,48,49,55,56,58,63,70,72,79,82,84,88,91,92,94,95,102,108],[2,52]),{17:[2,121]},o([4,5,91],[2,139]),{91:[2,153]},o($V9,$Vn,{112:50,68:51,91:$Vo}),{56:$Vp,65:53},{18:[1,55],63:[1,56]},o($Vh,[2,119]),o($Vh,[2,116],{104:57,97:[1,58]}),o($V9,[2,142]),o($Vq,$Vk,{118:59,8:60,7:61,6:63,4:$Vl,5:$Vr}),o($Vs,[2,3]),o($V9,[2,154]),o([10,56,92],$Vk,{7:61,6:63,127:64,8:65,4:$Vl,5:$Vr}),o($V9,[2,155]),o($V9,[2,156]),o([1,10,108,121,130,133,134,136],$Vk,{7:61,6:63,113:66,8:67,4:$Vl,5:$Vr}),o($Vs,[2,125]),o([5,10,12,13,17,55,56,58,70,79,82,88,92,94,95,108],$Vk,{6:68,4:$Vl}),o($Vs,[2,123]),o([1,4,5,10,12,13,17,18,20,21,22,23,24,25,26,27,28,29,30,31,32,33,39,55,56,58,63,70,72,79,82,84,88,91,92,94,95,102,108,121,130,133,134,136],[2,72]),o([1,4,5,10,12,13,17,18,20,21,22,23,24,25,26,27,28,29,30,31,32,33,55,56,58,63,70,72,79,82,84,88,91,92,94,95,102,108,111,121,130,133,134,136],[2,122]),o($Vh,$Vi,{105:69,56:$Vj}),o($Vh,[2,118]),{56:$Vp,65:70},{4:$Vl,6:71,9:73,10:$V2,89:74,92:$Vk,93:77,94:$Vt,95:$Vu,101:78,102:[1,82],103:75,107:79,108:$V3,116:76,117:72},o($Vv,[2,136]),o([1,5,10,12,13,17,18,20,21,22,23,24,25,26,27,28,29,30,31,32,33,55,56,58,63,70,72,79,82,84,88,91,92,94,95,102,108,121,130,133,134,136],[2,7],{6:83,4:$Vl}),o($Vs,[2,8]),o($Vs,[2,5]),{4:$Vl,6:84,9:86,10:$V2,56:$Vw,92:$Vk,124:88,125:87,126:85},o($Vx,[2,150]),o($V9,[2,128]),o($Vs,[2,127]),o([10,12,13,17,55,56,58,70,79,82,88,92,94,95,108],$Vk,{7:61,6:63,90:90,8:91,4:$Vl,5:$Vr}),o($Vh,[2,120]),o($Vh,[2,115]),{92:[1,92]},o($Vv,[2,137]),o($Vv,[2,132]),o($Vv,[2,133]),o($Vv,[2,134]),o($Vv,[2,135]),{56:$Vy,98:93},{56:$Vy,98:95},{17:$Va,109:96},{56:[2,103]},{56:[2,104]},{94:[1,97],95:[1,98]},o($Vs,[2,6]),o([4,10,56],[2,147],{92:[1,99]}),o($Vx,[2,151]),o([4,10,92],[2,148],{56:$Vz}),o($Vx,[2,149],{63:[1,101]}),o($VA,[2,145]),o($VA,[2,143]),{4:$Vl,6:102,9:104,10:$V2,11:137,12:$VB,13:$VC,14:134,15:121,16:127,17:$VD,34:135,35:117,36:112,37:128,50:129,51:130,52:123,53:124,54:133,55:$Vc,56:$Vd,57:126,58:$VE,59:125,60:131,61:122,62:111,64:105,67:103,69:114,70:$VF,76:108,78:109,79:$VG,81:116,82:$VH,86:110,87:107,88:$VI,89:106,92:$Vk,93:77,94:$Vt,95:$Vu,108:$VJ,115:136},o($VK,[2,100]),o($Vb,[2,138]),o($VL,$VM,{99:141,39:$VN}),o($VO,[2,106],{96:143,97:[1,144]}),o($VP,$VM,{99:145,39:$VN}),o([4,5,10,91,92,94,95,102,108],$Vf,{110:146,111:$Vg}),{56:[2,112]},{56:[2,113]},o($Vb,[2,152]),o($VA,[2,144]),o([10,56],$Vk,{6:147,4:$Vl}),{92:[1,148]},o($VK,[2,101]),o($VQ,[2,93]),o($VQ,[2,94]),o($VQ,[2,95]),o($VQ,[2,96]),o($VQ,[2,97]),o($VQ,[2,98]),o($VQ,[2,99]),o($VR,$Vk,{7:61,6:63,8:149,4:$Vl,5:$Vr,63:$VS}),o($VR,$Vk,{7:61,6:63,8:151,4:$Vl,5:$Vr}),{11:137,12:$VB,13:$VC,14:134,15:121,16:127,17:$VT,34:135,35:152,37:128,50:129,51:130,52:123,53:124,54:133,55:$Vc,56:$Vd,57:126,58:$VE,59:125,60:131,61:122,108:$VJ,115:136},o($VR,$Vk,{7:61,6:63,73:154,8:155,4:$Vl,5:$Vr}),{11:137,12:$VB,13:$VC,14:134,15:121,16:127,17:$VT,34:135,35:156,37:128,50:129,51:130,52:123,53:124,54:133,55:$Vc,56:$Vd,57:126,58:$VE,59:125,60:131,61:122,108:$VJ,115:136},{83:157,84:[1,158]},o($VU,[2,67],{19:159,20:$VV,21:$VW,22:$VX,23:$VY,24:$VZ,25:$V_,26:$V$,27:$V01,28:$V11,29:$V21,30:$V31,31:$V41,32:$V51,33:$V61}),{11:137,12:$VB,13:$VC,14:178,15:121,16:127,17:$VT,34:179,35:117,37:128,50:176,51:130,52:123,53:124,54:133,55:$Vc,56:$Vd,57:175,58:$VE,59:125,60:177,61:122,62:174,108:$VJ,115:136},{11:137,12:$VB,13:$VC,14:134,15:121,16:127,17:$VT,34:135,35:180,37:128,50:129,51:130,52:123,53:124,54:133,55:$Vc,56:$Vd,57:126,58:$VE,59:125,60:131,61:122,108:$VJ,115:136},{9:104,10:$V2,11:137,12:$VB,13:$VC,14:134,15:121,16:127,17:$VD,34:135,35:117,36:112,37:128,50:129,51:130,52:123,53:124,54:133,55:$Vc,56:$Vd,57:126,58:$VE,59:125,60:131,61:122,62:111,64:105,67:182,68:183,69:114,70:$VF,76:108,78:109,79:$VG,80:181,81:116,82:$VH,86:110,87:107,88:$VI,89:106,91:$Vo,93:77,94:$Vt,95:$Vu,108:$VJ,115:136},o([4,5,10,17,18,20,21,22,23,24,25,26,27,28,29,30,31,32,33,55,56,58,63,70,72,79,82,84,88,91,92,94,95,102,108],[2,62],{11:184,12:$VB,13:$VC}),o($Vm,[2,63]),o($Vm,[2,64]),o($Vm,[2,65]),o($Vm,[2,66]),o($Vm,$V71),o($Vm,[2,60]),o($Vm,[2,61]),o($Vm,$V81),o([4,5,10,12,13,18,20,21,22,23,24,25,26,27,28,29,30,31,32,33,55,56,58,63,70,72,79,82,84,88,91,92,94,95,102,108],$V91,{36:186,38:187,17:[1,185],39:[1,188],40:[1,189],41:[1,190],42:[1,191],43:[1,192],44:[1,193],45:[1,194],46:[1,195],47:[1,196],48:[1,197],49:[1,198]}),o($Vm,$Va1),o($Vm,[2,54]),o($Vm,[2,55]),o($Vm,$Vb1),o($Vm,$Vc1),{17:$Va,109:199},{15:200,17:[1,201],51:202,54:133,55:$Vc,56:$Vd,57:126,58:$VE},{17:[2,129]},o($Vm,[2,10]),o($Vm,[2,11]),o([10,12,13,17,55,56,58,70,72,79,82,84,88,92,94,95,102,108],$Vk,{7:61,6:63,100:203,8:204,4:$Vl,5:$Vr}),{11:137,12:$VB,13:$VC,14:134,15:121,16:127,17:$VT,34:135,35:205,37:128,50:129,51:130,52:123,53:124,54:133,55:$Vc,56:$Vd,57:126,58:$VE,59:125,60:131,61:122,108:$VJ,115:136},o($VO,[2,107]),{56:$Vp,65:206},o($Vq,$Vk,{7:61,6:63,8:204,100:207,4:$Vl,5:$Vr}),o($VP,$Vn,{68:51,112:208,91:$Vo}),{9:210,10:$V2,56:$Vw,124:209},o($Vs,[2,102]),o($VQ,[2,70]),{11:137,12:$VB,13:$VC,14:134,15:121,16:127,17:$VT,34:135,35:211,37:128,50:129,51:130,52:123,53:124,54:133,55:$Vc,56:$Vd,57:126,58:$VE,59:125,60:131,61:122,108:$VJ,115:136},o($VQ,[2,71]),o($VR,$Vk,{7:61,6:63,19:159,8:212,4:$Vl,5:$Vr,20:$VV,21:$VW,22:$VX,23:$VY,24:$VZ,25:$V_,26:$V$,27:$V01,28:$V11,29:$V21,30:$V31,31:$V41,32:$V51,33:$V61}),{11:137,12:$VB,13:$VC,14:178,15:121,16:127,17:$VT,34:179,35:213,37:128,50:176,51:130,52:123,53:124,54:133,55:$Vc,56:$Vd,57:175,58:$VE,59:125,60:177,61:122,108:$VJ,115:136},o([10,12,13,17,55,56,58,70,79,82,84,88,92,94,95,108],$Vk,{7:61,6:63,75:214,71:215,74:216,8:217,4:$Vl,5:$Vr,72:[1,218]}),o($VQ,[2,77]),{9:104,10:$V2,11:137,12:$VB,13:$VC,14:134,15:121,16:127,17:$VD,19:159,20:$VV,21:$VW,22:$VX,23:$VY,24:$VZ,25:$V_,26:$V$,27:$V01,28:$V11,29:$V21,30:$V31,31:$V41,32:$V51,33:$V61,34:135,35:117,36:112,37:128,50:129,51:130,52:123,53:124,54:133,55:$Vc,56:$Vd,57:126,58:$VE,59:125,60:131,61:122,62:111,64:105,67:220,68:221,69:114,70:$VF,76:108,77:219,78:109,79:$VG,81:116,82:$VH,86:110,87:107,88:$VI,89:106,91:$Vo,93:77,94:$Vt,95:$Vu,108:$VJ,115:136},o($VQ,[2,91]),{9:104,10:$V2,11:137,12:$VB,13:$VC,14:134,15:121,16:127,17:$VD,34:135,35:117,36:112,37:128,50:129,51:130,52:123,53:124,54:133,55:$Vc,56:$Vd,57:126,58:$VE,59:125,60:131,61:122,62:111,64:105,67:182,68:183,69:114,70:$VF,76:108,78:109,79:$VG,80:222,81:116,82:$VH,85:[1,223],86:110,87:107,88:$VI,89:106,91:$Vo,93:77,94:$Vt,95:$Vu,108:$VJ,115:136},{11:137,12:$VB,13:$VC,14:134,15:121,16:127,17:$VD,34:135,35:224,36:225,37:128,50:129,51:130,52:123,53:124,54:133,55:$Vc,56:$Vd,57:126,58:$VE,59:125,60:131,61:122,108:$VJ,115:136},o($Vd1,[2,16]),o($Vd1,[2,17]),o($Vd1,[2,18]),o($Vd1,[2,19]),o($Vd1,[2,20]),o($Vd1,[2,21]),o($Vd1,[2,22]),o($Vd1,[2,23]),o($Vd1,[2,24]),o($Vd1,[2,25]),o($Vd1,[2,26]),o($Vd1,[2,27]),o($Vd1,[2,28]),o($Vd1,[2,29]),{18:[1,226],63:$VS},o([12,13,20,21,22,23,24,25,26,27,28,29,30,31,32,33,63],$V71,{18:$Ve1}),o($Vf1,$V81,{18:[1,228]}),o($Vf1,$Va1,{18:[1,229]}),o($Vf1,$Vb1,{18:[1,230]}),o($Vf1,$Vc1,{18:[1,231]}),{9:104,10:$V2,11:137,12:$VB,13:$VC,14:134,15:121,16:127,17:$VD,19:159,20:$VV,21:$VW,22:$VX,23:$VY,24:$VZ,25:$V_,26:$V$,27:$V01,28:$V11,29:$V21,30:$V31,31:$V41,32:$V51,33:$V61,34:135,35:117,36:112,37:128,50:129,51:130,52:123,53:124,54:133,55:$Vc,56:$Vd,57:126,58:$VE,59:125,60:131,61:122,62:111,64:105,66:232,67:233,68:234,69:114,70:$VF,76:108,78:109,79:$VG,81:116,82:$VH,86:110,87:107,88:$VI,89:106,91:$Vo,93:77,94:$Vt,95:$Vu,108:$VJ,115:136},{4:$Vl,5:$Vr,6:63,7:61,8:235,84:$Vk},o($VQ,[2,86]),o($VQ,[2,87]),o($Vm,[2,12]),{11:137,12:$VB,13:$VC,14:134,15:121,16:127,17:$VT,18:[1,236],34:135,35:117,37:128,50:129,51:130,52:123,53:124,54:133,55:$Vc,56:$Vd,57:126,58:$VE,59:125,60:131,61:122,62:174,108:$VJ,115:136},o($Vm,[2,50]),{11:137,12:$VB,13:$VC,14:134,15:121,16:127,17:$VD,34:135,35:237,36:238,37:128,50:129,51:130,52:123,53:124,54:133,55:$Vc,56:$Vd,57:126,58:$VE,59:125,60:131,61:122,108:$VJ,115:136},o($Vd1,[2,34]),o($Vd1,[2,35]),o($Vd1,[2,36]),o($Vd1,[2,37]),o($Vd1,[2,38]),o($Vd1,[2,39]),o($Vd1,[2,40]),o($Vd1,[2,41]),o($Vd1,[2,42]),o($Vd1,[2,43]),o($Vd1,[2,44]),o($Vm,$Vf,{110:239,111:$Vg}),o($Vm,[2,13]),{51:202,54:133,55:$Vc,56:$Vd,57:240,58:$VE},o($Vm,$V91),o($VL,[2,111]),o($VL,[2,110]),o($VL,[2,108],{19:159,20:$VV,21:$VW,22:$VX,23:$VY,24:$VZ,25:$V_,26:$V$,27:$V01,28:$V11,29:$V21,30:$V31,31:$V41,32:$V51,33:$V61}),o($VO,[2,105]),o($Vv,[2,114]),o($Vq,$Vk,{7:61,6:63,8:67,113:241,4:$Vl,5:$Vr}),o($VA,[2,146]),{56:$Vz},o($VU,[2,68],{19:159,20:$VV,21:$VW,22:$VX,23:$VY,24:$VZ,25:$V_,26:$V$,27:$V01,28:$V11,29:$V21,30:$V31,31:$V41,32:$V51,33:$V61}),o($VQ,[2,92]),{19:159,20:$VV,21:$VW,22:$VX,23:$VY,24:$VZ,25:$V_,26:$V$,27:$V01,28:$V11,29:$V21,30:$V31,31:$V41,32:$V51,33:$V61},o($VR,$Vk,{7:61,6:63,8:242,4:$Vl,5:$Vr}),o($VQ,[2,78]),o($VQ,[2,80]),o($VQ,[2,81]),{9:104,10:$V2,11:137,12:$VB,13:$VC,14:134,15:121,16:127,17:$VD,34:135,35:117,36:112,37:128,50:129,51:130,52:123,53:124,54:133,55:$Vc,56:$Vd,57:126,58:$VE,59:125,60:131,61:122,62:111,64:105,66:244,67:233,68:234,69:114,70:[1,243],76:108,78:109,79:$VG,81:116,82:$VH,86:110,87:107,88:$VI,89:106,91:$Vo,93:77,94:$Vt,95:$Vu,108:$VJ,115:136},o($VR,$Vk,{7:61,6:63,8:245,4:$Vl,5:$Vr}),o($VQ,[2,83]),o($VQ,[2,84]),o($VR,$Vk,{7:61,6:63,8:246,4:$Vl,5:$Vr}),{11:137,12:$VB,13:$VC,14:134,15:121,16:127,17:$VT,34:135,35:247,37:128,50:129,51:130,52:123,53:124,54:133,55:$Vc,56:$Vd,57:126,58:$VE,59:125,60:131,61:122,108:$VJ,115:136},o($Vg1,[2,30],{19:159,20:$VV,21:$VW,22:$VX,23:$VY,24:$VZ,25:$V_,26:$V$,27:$V01,28:$V11,29:$V21,30:$V31,31:$V41,32:$V51,33:$V61}),o($Vm,[2,31]),o($Vm,[2,69]),o($Vm,[2,57]),o($Vm,[2,48]),o($Vm,[2,59]),o($Vm,[2,15]),o($Vm,[2,33]),o($VR,$Vk,{7:61,6:63,8:248,4:$Vl,5:$Vr}),o($VQ,[2,73]),o($VQ,[2,74]),{84:[2,88]},o($Vm,[2,49]),o($Vg1,[2,45],{19:159,20:$VV,21:$VW,22:$VX,23:$VY,24:$VZ,25:$V_,26:$V$,27:$V01,28:$V11,29:$V21,30:$V31,31:$V41,32:$V51,33:$V61}),o($Vm,[2,46]),o([4,5,10,12,13,17,18,20,21,22,23,24,25,26,27,28,29,30,31,32,33,55,56,58,63,70,72,79,82,84,88,92,94,95,102,108],$Vn,{68:51,112:249,91:$Vo}),{18:$Ve1},o($Vv,[2,131]),o($VQ,[2,82]),{11:137,12:$VB,13:$VC,14:134,15:121,16:127,17:$VT,34:135,35:250,37:128,50:129,51:130,52:123,53:124,54:133,55:$Vc,56:$Vd,57:126,58:$VE,59:125,60:131,61:122,108:$VJ,115:136},o($VR,$Vk,{7:61,6:63,8:251,4:$Vl,5:$Vr}),o($VQ,[2,85]),o($VQ,[2,89]),{9:104,10:$V2,11:137,12:$VB,13:$VC,14:134,15:121,16:127,17:$VD,19:159,20:$VV,21:$VW,22:$VX,23:$VY,24:$VZ,25:$V_,26:$V$,27:$V01,28:$V11,29:$V21,30:$V31,31:$V41,32:$V51,33:$V61,34:135,35:117,36:112,37:128,50:129,51:130,52:123,53:124,54:133,55:$Vc,56:$Vd,57:126,58:$VE,59:125,60:131,61:122,62:111,64:105,67:182,68:183,69:114,70:$VF,76:108,78:109,79:$VG,80:252,81:116,82:$VH,86:110,87:107,88:$VI,89:106,91:$Vo,93:77,94:$Vt,95:$Vu,108:$VJ,115:136},o($VQ,[2,75]),o([10,12,13,17,18,20,21,22,23,24,25,26,27,28,29,30,31,32,33,55,56,58,63,70,72,79,82,84,88,91,92,94,95,102,108],$Vk,{7:61,6:63,8:67,113:253,4:$Vl,5:$Vr}),{9:104,10:$V2,11:137,12:$VB,13:$VC,14:134,15:121,16:127,17:$VD,19:159,20:$VV,21:$VW,22:$VX,23:$VY,24:$VZ,25:$V_,26:$V$,27:$V01,28:$V11,29:$V21,30:$V31,31:$V41,32:$V51,33:$V61,34:135,35:117,36:112,37:128,50:129,51:130,52:123,53:124,54:133,55:$Vc,56:$Vd,57:126,58:$VE,59:125,60:131,61:122,62:111,64:105,66:254,67:233,68:234,69:114,70:$VF,76:108,78:109,79:$VG,81:116,82:$VH,86:110,87:107,88:$VI,89:106,91:$Vo,93:77,94:$Vt,95:$Vu,108:$VJ,115:136},o($VQ,[2,79]),o($VR,$Vk,{7:61,6:63,8:255,4:$Vl,5:$Vr}),o($Vm,[2,130]),o($VR,$Vk,{7:61,6:63,8:256,4:$Vl,5:$Vr}),o($VQ,[2,90]),o($VQ,[2,76])],
defaultActions: {35:[2,121],37:[2,153],80:[2,103],81:[2,104],97:[2,112],98:[2,113],138:[2,129],235:[2,88]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 10;
break;
case 1:return 133;
break;
case 2:return 134;
break;
case 3:return 108;
break;
case 4:return 121;
break;
case 5:return 130;
break;
case 6:return 94;
break;
case 7:return 95;
break;
case 8:return 102;
break;
case 9:return 88;
break;
case 10:return 70;
break;
case 11:return 72;
break;
case 12:return 79;
break;
case 13:return 82;
break;
case 14:return 84;
break;
case 15:return 85;
break;
case 16:return 4;
break;
case 17:return 56;
break;
case 18:return 58;
break;
case 19:return 58;
break;
case 20:return 58;
break;
case 21:return 58;
break;
case 22:return 58;
break;
case 23:return 58;
break;
case 24:return 58;
break;
case 25:return 55;
break;
case 26:return 46;
break;
case 27:return 45;
break;
case 28:return 43;
break;
case 29:return 44;
break;
case 30:return 40;
break;
case 31:return 41;
break;
case 32:return 42;
break;
case 33:return 47;
break;
case 34:return 48;
break;
case 35:return 49;
break;
case 36:return 'RIGHT_OP';
break;
case 37:return 'LEFT_OP';
break;
case 38:return 12;
break;
case 39:return 13;
break;
case 40:return 111;
break;
case 41:return 32;
break;
case 42:return 33;
break;
case 43:return 28;
break;
case 44:return 29;
break;
case 45:return 26;
break;
case 46:return 27;
break;
case 47:return 5;
break;
case 48: return(';'); 
break;
case 49: return('{'); 
break;
case 50: return('}'); 
break;
case 51: return(','); 
break;
case 52: return(':'); 
break;
case 53: return('='); 
break;
case 54: return('('); 
break;
case 55: return(')'); 
break;
case 56: return('['); 
break;
case 57: return(']'); 
break;
case 58: return('.'); 
break;
case 59: return('&'); 
break;
case 60: return('!'); 
break;
case 61: return('~'); 
break;
case 62: return('-'); 
break;
case 63: return('+'); 
break;
case 64: return('*'); 
break;
case 65: return('/'); 
break;
case 66: return('%'); 
break;
case 67: return('<'); 
break;
case 68: return('>'); 
break;
case 69: return('^'); 
break;
case 70: return('|'); 
break;
case 71: return('?'); 
break;
case 72: 
break;
case 73: /* ignore bad characters */ 
break;
}
},
rules: [/^(?:\/\/(.*))/,/^(?:import\b)/,/^(?:export\b)/,/^(?:func\b)/,/^(?:class\b)/,/^(?:enum\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:static\b)/,/^(?:return\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:while\b)/,/^(?:try\b)/,/^(?:catch\b)/,/^(?:as\b)/,/^(?:(\n))/,/^(?:([a-zA-Z_])(([a-zA-Z_])|([0-9]))*)/,/^(?:([0-9])+\.([0-9])*(([Ee][+-]?([0-9])+))?([fFlL])?)/,/^(?:([0-9])*\.([0-9])+(([Ee][+-]?([0-9])+))?([fFlL])?)/,/^(?:0[xX]([a-fA-F0-9])+([uUlL]*)?)/,/^(?:0([0-9])+([uUlL]*)?)/,/^(?:([0-9])+([uUlL]*)?)/,/^(?:L?'(\\'|[^'])+')/,/^(?:([0-9])+([Ee][+-]?([0-9])+)([fFlL])?)/,/^(?:L?"(\\"|[^"])*")/,/^(?:>>=)/,/^(?:<<=)/,/^(?:\+=)/,/^(?:-=)/,/^(?:\*=)/,/^(?:\/=)/,/^(?:%=)/,/^(?:&=)/,/^(?:\^=)/,/^(?:\|=)/,/^(?:>>)/,/^(?:<<)/,/^(?:\+\+)/,/^(?:--)/,/^(?:->)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:!=)/,/^(?:$)/,/^(?:;)/,/^(?:(\{|<%))/,/^(?:(\}|%>))/,/^(?:,)/,/^(?::)/,/^(?:=)/,/^(?:\()/,/^(?:\))/,/^(?:(\[|<:))/,/^(?:(\]|:>))/,/^(?:\.)/,/^(?:&)/,/^(?:!)/,/^(?:~)/,/^(?:-)/,/^(?:\+)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:<)/,/^(?:>)/,/^(?:\^)/,/^(?:\|)/,/^(?:\?)/,/^(?:[ \t\v\r\f])/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = generatedParser;
exports.Parser = generatedParser.Parser;
exports.parse = function () { return generatedParser.parse.apply(generatedParser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}