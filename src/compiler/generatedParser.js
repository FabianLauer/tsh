/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,11],$V1=[1,12],$V2=[1,8],$V3=[1,13],$V4=[1,14],$V5=[1,4,5,10,77,89],$V6=[4,5],$V7=[1,4,5,10,15,16,39,41,42,51,53,59,63,65,66,77,89],$V8=[4,5,62],$V9=[75,80],$Va=[2,77],$Vb=[1,28],$Vc=[2,4],$Vd=[1,32],$Ve=[1,35],$Vf=[1,37],$Vg=[4,5,10,15,16,39,41,42,51,53,59,63,65,66],$Vh=[2,3],$Vi=[5,10,15,16,39,41,42,51,59,63,65,66],$Vj=[1,55],$Vk=[1,56],$Vl=[4,10,63,65,66],$Vm=[1,60],$Vn=[1,84],$Vo=[1,85],$Vp=[1,78],$Vq=[1,79],$Vr=[1,80],$Vs=[1,77],$Vt=[1,72],$Vu=[4,10,15,16,39,41,42,51,59,63,65,66],$Vv=[5,10,15,16,39,41,42,51,53,59,63,65,66],$Vw=[2,7],$Vx=[4,5,10,15,16,27,39,41,42,51,53,59,63,65,66],$Vy=[10,15,16,39,41,42,51,53,59,63,65,66],$Vz=[4,5,10,15,16,39,41,42,51,53,59,62,63,65,66],$VA=[4,5,10,15,16,20,21,22,23,24,39,41,42,51,53,59,62,63,65,66],$VB=[2,36],$VC=[1,116],$VD=[39,41,42],$VE=[15,16,39,41,42];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"nl_or_eof":3,"NL":4,"EOF":5,"maybe_nl":6,"maybe_nls":7,"maybe_nl_or_eof":8,"comment":9,"SL_COMMENT":10,"ml_comment":11,"comments":12,"maybe_comments":13,"unary_operator":14,"INC_OP":15,"DEC_OP":16,"unary_operation":17,"primary_expr":18,"binary_operator":19,"+":20,"-":21,"*":22,"/":23,"%":24,"binary_operation":25,"assignment_operator":26,"=":27,"MUL_ASSIGN":28,"DIV_ASSIGN":29,"MOD_ASSIGN":30,"ADD_ASSIGN":31,"SUB_ASSIGN":32,"LEFT_ASSIGN":33,"RIGHT_ASSIGN":34,"AND_ASSIGN":35,"XOR_ASSIGN":36,"OR_ASSIGN":37,"assignment_expr":38,"IDENTIFIER":39,"expression":40,"STRING_LITERAL":41,"CONSTANT":42,"operation":43,"expression_statement":44,"type_expr":45,"conditional_body":46,"statement":47,"compound_statement":48,"conditional_trivia":49,"conditional_if_statement":50,"IF":51,"conditional_else_if_statement":52,"ELSE":53,"conditional_maybe_else_if_statements":54,"conditional_else_statement":55,"conditional_maybe_else_statement":56,"conditional_statement":57,"return_statement":58,"RETURN":59,"var_decl":60,"statements":61,"{":62,"}":63,"var_decl_modifier":64,"LET":65,"CONST":66,"var_decl_type_decl":67,":":68,"var_decl_name_and_maybe_type_decl":69,"var_decl_maybe_assignment":70,"var_decl_end":71,"param_decl_type_expr":72,"param_decl":73,"param_decl_list":74,",":75,"func_ident":76,"FUNCTION":77,"func_param_decl_list":78,"(":79,")":80,"func_return_expr":81,"ARR":82,"func_body":83,"func_decl":84,"class_body_statement":85,"class_body_statements":86,"class_body_compound_statement":87,"class_ident":88,"CLASS":89,"class_body":90,"class_decl":91,"root_grammar":92,"root_grammar_list":93,"root":94,"$accept":0,"$end":1},
terminals_: {2:"error",4:"NL",5:"EOF",10:"SL_COMMENT",15:"INC_OP",16:"DEC_OP",20:"+",21:"-",22:"*",23:"/",24:"%",27:"=",28:"MUL_ASSIGN",29:"DIV_ASSIGN",30:"MOD_ASSIGN",31:"ADD_ASSIGN",32:"SUB_ASSIGN",33:"LEFT_ASSIGN",34:"RIGHT_ASSIGN",35:"AND_ASSIGN",36:"XOR_ASSIGN",37:"OR_ASSIGN",39:"IDENTIFIER",41:"STRING_LITERAL",42:"CONSTANT",51:"IF",53:"ELSE",59:"RETURN",62:"{",63:"}",65:"LET",66:"CONST",68:":",75:",",77:"FUNCTION",79:"(",80:")",82:"ARR",89:"CLASS"},
productions_: [0,[3,1],[3,1],[6,1],[6,0],[7,1],[7,2],[8,1],[8,1],[9,2],[11,2],[12,1],[12,1],[13,1],[14,1],[14,1],[17,2],[17,2],[19,1],[19,1],[19,1],[19,1],[19,1],[25,3],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[38,3],[18,1],[18,1],[18,1],[43,1],[43,1],[40,1],[40,1],[40,1],[44,2],[45,1],[46,1],[46,1],[49,1],[50,4],[52,5],[54,1],[54,2],[55,4],[56,1],[56,1],[57,6],[58,3],[47,1],[47,1],[47,1],[47,1],[47,1],[61,1],[61,2],[48,5],[64,1],[64,1],[67,2],[67,0],[69,2],[70,2],[70,0],[71,1],[60,4],[72,2],[72,0],[73,0],[73,2],[74,1],[74,3],[76,2],[78,3],[81,2],[81,0],[83,1],[83,0],[84,5],[85,1],[85,1],[86,0],[86,1],[86,2],[87,5],[88,2],[90,1],[90,0],[91,3],[92,1],[92,1],[92,1],[92,1],[93,1],[93,2],[94,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 9:
 this.$ = new yy.Comment([new yy.Token($$[$0-1])]) 
break;
case 14: case 15: case 18: case 19: case 20: case 21: case 22: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34:
 this.$ = yy.getOperatorFromToken($$[$0]) 
break;
case 16:
 this.$ = new yy.UnaryOperation($$[$0-1], $$[$0], yy.UnaryOperatorPosition.Postfix) 
break;
case 17:
 this.$ = new yy.UnaryOperation($$[$0-1], $$[$0], yy.UnaryOperatorPosition.Prefix) 
break;
case 23:
 this.$ = new yy.BinaryOperation($$[$0-2], $$[$0-1], $$[$0]) 
break;
case 35:
 this.$ = new yy.BinaryOperation(new yy.Expr($$[$0-2]), $$[$0-1], $$[$0]) 
break;
case 39: case 40: case 42: case 43: case 75: case 83: case 85: case 95: case 102:
 this.$ = $$[$0] 
break;
case 41: case 71:
 this.$ = new yy.Expr($$[$0]) 
break;
case 44:
 this.$ = new yy.ExprStatement($$[$0-1]) 
break;
case 45:
 this.$ = yy.TypeExpr.fromIdentifier(new yy.Token($$[$0])) 
break;
case 49:
 this.$ = new yy.IfStatement($$[$0-2], $$[$0-1]) 
break;
case 50:
 this.$ = new yy.ElseIfStatement($$[$0-2], $$[$0-1]) 
break;
case 52:

		this.$ = $$[$0-1] || []
		if (typeof $$[$0] !== 'undefined') {
			this.$ = this.$.concat($$[$0])
		}
	
break;
case 53:
 this.$ = new yy.ElseStatement([$$[$0-1]]) 
break;
case 56:

		var statements = [$$[$0-5]]
		if (Array.isArray($$[$0-3])) {
			statements = statements.concat($$[$0-3])
		}
		if (typeof $$[$0-1] !== 'undefined') {
			statements.push($$[$0-1])
		}
		this.$ = new yy.Statement(statements)
	
break;
case 57:
 this.$ = new yy.ReturnStatement($$[$0-1]) 
break;
case 63:
 this.$ = [] 
break;
case 64: case 92:

			$$[$0-1] = $$[$0-1] || []
			$$[$0] = $$[$0] || yy.Statement.Empty
			this.$ = $$[$0-1].concat($$[$0])
		
break;
case 65: case 93:

			if ($$[$0-2] === '\n' || $$[$0-2] === '') {
				$$[$0-2] = []
			}
			$$[$0-2] = $$[$0-2] || []
			this.$ = new yy.Statement($$[$0-2])
		
break;
case 66: case 67:
 this.$ = yy.getVarDeclModifierByKeyword($$[$0]) 
break;
case 68: case 82:
 this.$ = $$[$0-1] 
break;
case 70:
 this.$ = [yy.createToken($$[$0-1]), $$[$0]] 
break;
case 74:

			this.$ = yy.VarDecl.create({
				modifier: $$[$0-3],
				varName: $$[$0-2][0],
				typeDecl: $$[$0-2][1],
				assignment: $$[$0-1]
			})
		
break;
case 78:
 this.$ = new yy.ParamDecl(new yy.Token($$[$0-1]), $$[$0]) 
break;
case 79:

			const decls = []
			if (typeof $$[$0] !== 'undefined') {
				decls.push($$[$0])
			}
			this.$ = yy.ParamDeclList.fromParamDecls(decls)
		
break;
case 80:

			this.$ = yy.ParamDeclList.fromParamDecls(
				$$[$0-2].paramDecls.concat($$[$0])
			)
		
break;
case 81: case 94:
 this.$ = yy.createToken($$[$0]) 
break;
case 87:

			this.$ = yy.FuncDecl.create({
				funcName: $$[$0-4],
				runtimeParamDecls: $$[$0-3],
				returnTypeDecl: $$[$0-2],
				funcBody: $$[$0-1]
			})
		
break;
case 97:

			this.$ = yy.ClassDecl.create({
				className: $$[$0-2],
				classBody: $$[$0-1]
			})
		
break;
case 103:

			$$[$0-1] = $$[$0-1] || []
			if (!Array.isArray($$[$0-1])) {
				$$[$0-1] = [$$[$0-1]]
			}
			this.$ = $$[$0-1].concat($$[$0])
		
break;
case 104:

	if (Array.isArray($$[$0])) {
		$$[$0] = $$[$0].filter(node => (
			node !== '\n' &&
			node !== ''
		))
		yy.result.push.apply(yy.result, $$[$0])
	} else {
		yy.result.push($$[$0])
	}
	return this.$

break;
}
},
table: [{3:7,4:$V0,5:$V1,9:4,10:$V2,76:9,77:$V3,84:5,88:10,89:$V4,91:6,92:3,93:2,94:1},{1:[3]},{1:[2,104],3:7,4:$V0,5:$V1,9:4,10:$V2,76:9,77:$V3,84:5,88:10,89:$V4,91:6,92:15},o($V5,[2,102]),o($V5,[2,98]),o($V5,[2,99]),o($V5,[2,100]),o($V5,[2,101]),{3:16,4:$V0,5:$V1},{78:17,79:[1,18]},o($V6,[2,96],{90:19,87:20,62:[1,21]}),o($V7,[2,1]),o($V7,[2,2]),{39:[1,22]},{39:[1,23]},o($V5,[2,103]),o($V7,[2,9]),o($V8,[2,84],{81:24,82:[1,25]}),o($V9,$Va,{74:26,73:27,39:$Vb}),{3:29,4:$V0,5:$V1},o($V6,[2,95]),o([5,10,63,65,66],$Vc,{7:30,6:31,4:$Vd}),{79:[2,81]},o($V8,[2,94]),o($V6,[2,86],{83:33,48:34,62:$Ve}),{39:$Vf,45:36},{75:[1,39],80:[1,38]},o($V9,[2,79]),o($V9,[2,76],{72:40,68:[1,41]}),o($V5,[2,97]),o([10,63,65,66],[2,90],{86:42,6:43,3:44,4:[1,45],5:$V1}),o($Vg,[2,5]),o($Vg,$Vh),{3:46,4:$V0,5:$V1},o($V6,[2,85]),o($Vi,$Vc,{6:47,4:$Vd}),o($V8,[2,83]),o([4,5,10,15,16,27,39,41,42,51,53,59,62,63,65,66,75,80],[2,45]),o([4,5,62,82],[2,82]),o($V9,$Va,{73:48,39:$Vb}),o($V9,[2,78]),{39:$Vf,45:49},{4:$Vd,6:31,7:50,9:52,10:$V2,60:53,63:$Vc,64:54,65:$Vj,66:$Vk,85:51},o($Vg,[2,6]),o($Vl,[2,91]),o([4,5,10,63,65,66],$Vh),o($V5,[2,87]),o([10,15,16,39,41,42,51,59,63,65,66],$Vc,{6:31,61:57,8:58,7:59,4:$Vd,5:$Vm}),o($V9,[2,80]),o($V9,[2,75]),{4:$Vd,6:43,63:[1,61]},o($Vl,[2,92]),o($Vl,[2,88]),o($Vl,[2,89]),{39:[1,63],69:62},{39:[2,66]},{39:[2,67]},{4:$Vd,6:64,9:66,10:$V2,14:83,15:$Vn,16:$Vo,17:81,18:74,25:82,38:76,39:$Vp,40:71,41:$Vq,42:$Vr,43:75,44:67,47:65,50:73,51:$Vs,57:70,58:69,59:$Vt,60:68,63:$Vc,64:54,65:$Vj,66:$Vk},o($Vu,[2,63]),o($Vv,$Vw,{6:43,4:$Vd}),o($Vg,[2,8]),o($V6,[2,93]),o($Vg,[2,72],{70:86,27:[1,87]}),o($Vx,[2,69],{67:88,68:[1,89]}),{63:[1,90]},o($Vu,[2,64]),o($Vg,[2,58]),o($Vg,[2,59]),o($Vg,[2,60]),o($Vg,[2,61]),o($Vg,[2,62]),o($Vy,$Vc,{6:31,7:59,8:91,4:$Vd,5:$Vm}),{14:83,15:$Vn,16:$Vo,17:81,18:74,25:82,38:76,39:$Vp,40:92,41:$Vq,42:$Vr,43:75},o($Vv,$Vc,{6:31,49:93,7:94,4:$Vd}),o([4,5,10,39,41,42,51,53,59,62,63,65,66],[2,41],{14:95,19:96,15:$Vn,16:$Vo,20:[1,97],21:[1,98],22:[1,99],23:[1,100],24:[1,101]}),o($Vz,[2,42]),o($Vz,[2,43]),{14:83,15:$Vn,16:$Vo,17:81,18:74,25:82,38:76,39:$Vp,40:102,41:$Vq,42:$Vr,43:75},o($VA,$VB,{26:103,27:[1,104],28:[1,105],29:[1,106],30:[1,107],31:[1,108],32:[1,109],33:[1,110],34:[1,111],35:[1,112],36:[1,113],37:[1,114]}),o($VA,[2,37]),o($VA,[2,38]),o($Vz,[2,39]),o($Vz,[2,40]),{18:115,39:$VC,41:$Vq,42:$Vr},o($Vz,[2,14]),o($Vz,[2,15]),o($Vy,$Vc,{6:31,7:59,71:117,8:118,4:$Vd,5:$Vm}),{14:83,15:$Vn,16:$Vo,17:81,18:74,25:82,38:76,39:$Vp,40:119,41:$Vq,42:$Vr,43:75},o($Vx,[2,70]),{39:$Vf,45:120},o($Vg,[2,65]),o($Vg,[2,44]),o($Vy,$Vc,{6:31,7:59,8:121,4:$Vd,5:$Vm}),o($Vv,$Vc,{6:31,7:94,54:122,49:123,4:$Vd}),o($Vv,[2,48],{6:43,4:$Vd}),o($Vz,[2,16]),{18:124,39:$VC,41:$Vq,42:$Vr},o($VD,[2,18]),o($VD,[2,19]),o($VD,[2,20]),o($VD,[2,21]),o($VD,[2,22]),{9:66,10:$V2,14:83,15:$Vn,16:$Vo,17:81,18:74,25:82,38:76,39:$Vp,40:71,41:$Vq,42:$Vr,43:75,44:67,46:125,47:126,48:127,50:73,51:$Vs,57:70,58:69,59:$Vt,60:68,62:$Ve,64:54,65:$Vj,66:$Vk},{14:83,15:$Vn,16:$Vo,17:81,18:74,25:82,38:76,39:$Vp,40:128,41:$Vq,42:$Vr,43:75},o($VE,[2,24]),o($VE,[2,25]),o($VE,[2,26]),o($VE,[2,27]),o($VE,[2,28]),o($VE,[2,29]),o($VE,[2,30]),o($VE,[2,31]),o($VE,[2,32]),o($VE,[2,33]),o($VE,[2,34]),o($Vz,[2,17]),o($Vz,$VB),o($Vg,[2,74]),o($Vg,[2,73]),o($Vg,[2,71]),o($Vx,[2,68]),o($Vg,[2,57]),o($Vi,$Vc,{6:31,7:94,49:129,52:130,4:$Vd,53:[1,131]}),o($Vg,[2,51]),o($Vz,[2,23]),o($Vy,$Vc,{6:31,7:59,8:132,4:$Vd,5:$Vm}),o($Vg,[2,46]),o($Vg,[2,47]),o($Vz,[2,35]),o($Vy,$Vc,{6:31,56:133,55:134,8:135,49:136,7:137,4:$Vd,5:$Vm}),o($Vg,[2,52]),{51:[1,138]},o($Vg,[2,49]),o($Vy,$Vc,{6:31,7:59,8:139,4:$Vd,5:$Vm}),o($Vg,[2,54]),o($Vg,[2,55]),{53:[1,140]},o($Vv,$Vw,{6:43,4:$Vd}),{14:83,15:$Vn,16:$Vo,17:81,18:74,25:82,38:76,39:$Vp,40:141,41:$Vq,42:$Vr,43:75},o($Vg,[2,56]),{9:66,10:$V2,14:83,15:$Vn,16:$Vo,17:81,18:74,25:82,38:76,39:$Vp,40:71,41:$Vq,42:$Vr,43:75,44:67,46:142,47:126,48:127,50:73,51:$Vs,57:70,58:69,59:$Vt,60:68,62:$Ve,64:54,65:$Vj,66:$Vk},{9:66,10:$V2,14:83,15:$Vn,16:$Vo,17:81,18:74,25:82,38:76,39:$Vp,40:71,41:$Vq,42:$Vr,43:75,44:67,46:143,47:126,48:127,50:73,51:$Vs,57:70,58:69,59:$Vt,60:68,62:$Ve,64:54,65:$Vj,66:$Vk},o($Vy,$Vc,{6:31,7:59,8:144,4:$Vd,5:$Vm}),o($Vy,$Vc,{6:31,7:59,8:145,4:$Vd,5:$Vm}),o($Vg,[2,53]),o($Vg,[2,50])],
defaultActions: {22:[2,81],55:[2,66],56:[2,67]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 10;
break;
case 1:return 77;
break;
case 2:return 89;
break;
case 3:return 65;
break;
case 4:return 66;
break;
case 5:return 59;
break;
case 6:return 51;
break;
case 7:return 53;
break;
case 8:return 4;
break;
case 9:return 39;
break;
case 10:return 42;
break;
case 11:return 42;
break;
case 12:return 42;
break;
case 13:return 42;
break;
case 14:return 42;
break;
case 15:return 42;
break;
case 16:return 42;
break;
case 17:return 41;
break;
case 18:return 34;
break;
case 19:return 33;
break;
case 20:return 31;
break;
case 21:return 32;
break;
case 22:return 28;
break;
case 23:return 29;
break;
case 24:return 30;
break;
case 25:return 35;
break;
case 26:return 36;
break;
case 27:return 37;
break;
case 28:return 'RIGHT_OP';
break;
case 29:return 'LEFT_OP';
break;
case 30:return 15;
break;
case 31:return 16;
break;
case 32:return 82;
break;
case 33:return 'AND_OP';
break;
case 34:return 'OR_OP';
break;
case 35:return 'LE_OP';
break;
case 36:return 'GE_OP';
break;
case 37:return 'EQ_OP';
break;
case 38:return 'NE_OP';
break;
case 39:return 5;
break;
case 40: return(';'); 
break;
case 41: return('{'); 
break;
case 42: return('}'); 
break;
case 43: return(','); 
break;
case 44: return(':'); 
break;
case 45: return('='); 
break;
case 46: return('('); 
break;
case 47: return(')'); 
break;
case 48: return('['); 
break;
case 49: return(']'); 
break;
case 50: return('.'); 
break;
case 51: return('&'); 
break;
case 52: return('!'); 
break;
case 53: return('~'); 
break;
case 54: return('-'); 
break;
case 55: return('+'); 
break;
case 56: return('*'); 
break;
case 57: return('/'); 
break;
case 58: return('%'); 
break;
case 59: return('<'); 
break;
case 60: return('>'); 
break;
case 61: return('^'); 
break;
case 62: return('|'); 
break;
case 63: return('?'); 
break;
case 64: 
break;
case 65: /* ignore bad characters */ 
break;
}
},
rules: [/^(?:\/\/(.*))/,/^(?:func\b)/,/^(?:class\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:return\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:(\n))/,/^(?:([a-zA-Z_])(([a-zA-Z_])|([0-9]))*)/,/^(?:([0-9])+\.([0-9])*(([Ee][+-]?([0-9])+))?([fFlL])?)/,/^(?:([0-9])*\.([0-9])+(([Ee][+-]?([0-9])+))?([fFlL])?)/,/^(?:0[xX]([a-fA-F0-9])+([uUlL]*)?)/,/^(?:0([0-9])+([uUlL]*)?)/,/^(?:([0-9])+([uUlL]*)?)/,/^(?:L?'(\\'|[^'])+')/,/^(?:([0-9])+([Ee][+-]?([0-9])+)([fFlL])?)/,/^(?:L?"(\\"|[^"])*")/,/^(?:>>=)/,/^(?:<<=)/,/^(?:\+=)/,/^(?:-=)/,/^(?:\*=)/,/^(?:\/=)/,/^(?:%=)/,/^(?:&=)/,/^(?:\^=)/,/^(?:\|=)/,/^(?:>>)/,/^(?:<<)/,/^(?:\+\+)/,/^(?:--)/,/^(?:->)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:!=)/,/^(?:$)/,/^(?:;)/,/^(?:(\{|<%))/,/^(?:(\}|%>))/,/^(?:,)/,/^(?::)/,/^(?:=)/,/^(?:\()/,/^(?:\))/,/^(?:(\[|<:))/,/^(?:(\]|:>))/,/^(?:\.)/,/^(?:&)/,/^(?:!)/,/^(?:~)/,/^(?:-)/,/^(?:\+)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:<)/,/^(?:>)/,/^(?:\^)/,/^(?:\|)/,/^(?:\?)/,/^(?:[ \t\v\r\f])/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}