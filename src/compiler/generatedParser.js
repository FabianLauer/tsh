/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var generatedParser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,13],$V1=[1,14],$V2=[1,9],$V3=[1,15],$V4=[1,16],$V5=[1,12],$V6=[1,4,5,10,84,96,100],$V7=[1,20],$V8=[4,5],$V9=[1,25],$Va=[1,4,5,10,12,13,17,42,45,47,55,57,63,67,69,70,77,84,96,100],$Vb=[2,92],$Vc=[1,29],$Vd=[18,82],$Ve=[2,85],$Vf=[1,32],$Vg=[2,4],$Vh=[1,35],$Vi=[4,5,10,12,13,17,18,20,21,22,23,24,25,42,45,47,55,57,63,66,67,69,70,77,84],$Vj=[2,94],$Vk=[1,39],$Vl=[1,41],$Vm=[10,67,69,70,77,84],$Vn=[1,49],$Vo=[1,4,5,10,67,69,70,77,84,96,100],$Vp=[1,65],$Vq=[1,66],$Vr=[4,10,67,69,70,77,84],$Vs=[10,12,13,17,42,45,47,55,63,67,69,70],$Vt=[1,73],$Vu=[1,103],$Vv=[1,104],$Vw=[1,93],$Vx=[1,97],$Vy=[1,98],$Vz=[1,91],$VA=[1,86],$VB=[4,10,12,13,17,42,45,47,55,63,67,69,70],$VC=[4,5,10,12,13,17,42,45,47,55,57,63,67,69,70,77,84],$VD=[2,77],$VE=[1,106],$VF=[4,5,10,12,13,17,30,42,45,47,55,57,63,67,69,70,77,84],$VG=[4,5,10,67,69,70,77,84],$VH=[4,5,10,12,13,17,42,45,47,55,57,63,67,69,70],$VI=[10,12,13,17,42,45,47,55,57,63,67,69,70],$VJ=[1,114],$VK=[1,115],$VL=[1,116],$VM=[1,117],$VN=[1,118],$VO=[1,119],$VP=[2,43],$VQ=[2,37],$VR=[2,40],$VS=[2,14],$VT=[2,23],$VU=[1,144],$VV=[12,13,17,42,45,47],$VW=[1,161],$VX=[20,21,22,23,24,25],$VY=[4,5,10,12,13,17,18,42,45,47,55,57,63,66,67,69,70,77,84];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"nl_or_eof":3,"NL":4,"EOF":5,"maybe_nl":6,"maybe_nls":7,"maybe_nl_or_eof":8,"comment":9,"SL_COMMENT":10,"unary_operator":11,"INC_OP":12,"DEC_OP":13,"atomic_unary_operation":14,"primary_expr":15,"unary_operation":16,"(":17,")":18,"binary_operator":19,".":20,"+":21,"-":22,"*":23,"/":24,"%":25,"atomic_binary_operation":26,"expression":27,"binary_operation":28,"assignment_operator":29,"=":30,"MUL_ASSIGN":31,"DIV_ASSIGN":32,"MOD_ASSIGN":33,"ADD_ASSIGN":34,"SUB_ASSIGN":35,"LEFT_ASSIGN":36,"RIGHT_ASSIGN":37,"AND_ASSIGN":38,"XOR_ASSIGN":39,"OR_ASSIGN":40,"atomic_assignment_expr":41,"IDENTIFIER":42,"assignment_expr":43,"string_literal":44,"STRING_LITERAL":45,"atomic_primary_expr":46,"CONSTANT":47,"operation":48,"expression_statement":49,"type_expr":50,"conditional_body":51,"statement":52,"compound_statement":53,"conditional_if_statement":54,"IF":55,"conditional_else_if_statement":56,"ELSE":57,"conditional_maybe_else_if_statements":58,"conditional_else_statement":59,"conditional_maybe_else_statement":60,"conditional_statement":61,"return_statement":62,"RETURN":63,"var_decl":64,"statements":65,"{":66,"}":67,"var_decl_modifier":68,"LET":69,"CONST":70,"var_decl_type_decl":71,":":72,"var_decl_name_and_maybe_type_decl":73,"var_decl_maybe_assignment":74,"var_decl_end":75,"static_var_decl_modifier":76,"STATIC":77,"static_var_decl":78,"param_decl_type_expr":79,"param_decl":80,"param_decl_list":81,",":82,"func_ident":83,"FUNCTION":84,"func_param_decl_list":85,"func_return_expr":86,"ARR":87,"func_body":88,"func_decl_end":89,"func_decl":90,"method_decl":91,"class_body_statement":92,"class_body_statements":93,"class_body_compound_statement":94,"class_ident":95,"CLASS":96,"class_body":97,"class_decl":98,"import_statement":99,"IMPORT":100,"root_grammar":101,"root_grammar_list":102,"root":103,"$accept":0,"$end":1},
terminals_: {2:"error",4:"NL",5:"EOF",10:"SL_COMMENT",12:"INC_OP",13:"DEC_OP",17:"(",18:")",20:".",21:"+",22:"-",23:"*",24:"/",25:"%",30:"=",31:"MUL_ASSIGN",32:"DIV_ASSIGN",33:"MOD_ASSIGN",34:"ADD_ASSIGN",35:"SUB_ASSIGN",36:"LEFT_ASSIGN",37:"RIGHT_ASSIGN",38:"AND_ASSIGN",39:"XOR_ASSIGN",40:"OR_ASSIGN",42:"IDENTIFIER",45:"STRING_LITERAL",47:"CONSTANT",55:"IF",57:"ELSE",63:"RETURN",66:"{",67:"}",69:"LET",70:"CONST",72:":",77:"STATIC",82:",",84:"FUNCTION",87:"ARR",96:"CLASS",100:"IMPORT"},
productions_: [0,[3,1],[3,1],[6,1],[6,0],[7,1],[7,2],[8,1],[8,1],[9,2],[11,1],[11,1],[14,2],[14,2],[16,1],[16,3],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[26,3],[28,1],[28,3],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[41,3],[43,1],[43,3],[44,1],[46,1],[46,1],[46,1],[15,1],[15,3],[48,1],[48,1],[27,1],[27,1],[27,1],[49,2],[50,1],[51,1],[51,1],[54,4],[56,5],[58,1],[58,2],[59,3],[60,1],[60,1],[61,4],[62,3],[52,1],[52,1],[52,1],[52,1],[52,1],[65,1],[65,2],[53,5],[68,1],[68,1],[71,2],[71,0],[73,2],[74,2],[74,0],[75,1],[64,4],[76,2],[76,2],[78,4],[79,2],[79,0],[80,0],[80,2],[81,1],[81,3],[83,2],[85,3],[86,2],[86,0],[88,1],[88,0],[89,1],[90,5],[91,5],[92,1],[92,1],[92,1],[92,1],[93,1],[93,2],[94,5],[95,2],[97,1],[97,0],[98,3],[99,3],[101,1],[101,1],[101,1],[101,1],[101,1],[102,1],[102,2],[103,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 9:
 this.$ = new yy.Comment([new yy.Token($$[$0-1])]) 
break;
case 10: case 11: case 16: case 17: case 18: case 19: case 20: case 21: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35:
 this.$ = yy.getOperatorFromToken($$[$0]) 
break;
case 12:
 this.$ = new yy.UnaryOperation($$[$0-1], $$[$0], yy.UnaryOperatorPosition.Postfix) 
break;
case 13:
 this.$ = new yy.UnaryOperation($$[$0], $$[$0-1], yy.UnaryOperatorPosition.Prefix) 
break;
case 14: case 23: case 37: case 42: case 43: case 45: case 46: case 47: case 48: case 49: case 73: case 83: case 91: case 93: case 106: case 115:
 this.$ = $$[$0] 
break;
case 15: case 24: case 38: case 44:
 this.$ = new yy.PrecedenceExpr($$[$0-1]) 
break;
case 22:
 this.$ = new yy.BinaryOperation($$[$0-2], $$[$0-1], $$[$0]) 
break;
case 36:

			var identifierToken = new yy.Token($$[$0-2])
			var identifier = new yy.Identifier(identifierToken)
			this.$ = new yy.BinaryOperation(identifier, $$[$0-1], $$[$0])
		
break;
case 39:

		/*
			We replace the quotes by slicing them away. This is trivial since the quotes
			are *always* the first and last character in the `STRING_LITERAL` terminal.
			The `.trim()` before the `.slice(...)` shouldn't be necessary, but we're
			rather safe than sorry.
		*/
		var content = new yy.Token(($$[$0]).trim().slice(1, -1))
		this.$ = new yy.StringLiteral(content)
	
break;
case 40:
 this.$ = new yy.Identifier(new yy.Token($$[$0])) 
break;
case 41:
 this.$ = new yy.NumericExpr(new yy.Token($$[$0])) 
break;
case 50:
 this.$ = new yy.ExprStatement($$[$0-1]) 
break;
case 51:
 this.$ = yy.TypeExpr.fromIdentifier(new yy.Token($$[$0])) 
break;
case 54:
 this.$ = new yy.IfStatement($$[$0-2], $$[$0-1]) 
break;
case 55:
 this.$ = new yy.ElseIfStatement($$[$0-2], $$[$0-1]) 
break;
case 57:

		this.$ = $$[$0-1] || []
		if (typeof $$[$0] !== 'undefined') {
			this.$ = this.$.concat($$[$0])
		}
	
break;
case 58:
 this.$ = new yy.ElseStatement([$$[$0-1]]) 
break;
case 61:

		var statements = [$$[$0-3]]
		if (Array.isArray($$[$0-2])) {
			statements = statements.concat($$[$0-2])
		}
		if (typeof $$[$0-1] !== 'undefined') {
			statements.push($$[$0-1])
		}
		this.$ = new yy.Statement(statements)
	
break;
case 62:
 this.$ = new yy.ReturnStatement($$[$0-1]) 
break;
case 68: case 102:
 this.$ = [] 
break;
case 69: case 103:

			$$[$0-1] = $$[$0-1] || []
			$$[$0] = $$[$0] || yy.Statement.Empty
			this.$ = $$[$0-1].concat($$[$0])
		
break;
case 70: case 104:

			if ($$[$0-2] === '\n' || $$[$0-2] === '') {
				$$[$0-2] = []
			}
			$$[$0-2] = $$[$0-2] || []
			this.$ = new yy.Statement($$[$0-2])
		
break;
case 71: case 72: case 80: case 81:
 this.$ = yy.getVarDeclModifierByKeyword($$[$0]) 
break;
case 75:
 this.$ = [yy.createToken($$[$0-1]), $$[$0]] 
break;
case 76:
 this.$ = new yy.Expr($$[$0]) 
break;
case 79:

			this.$ = yy.VarDecl.create({
				modifiers: yy.VarDeclModifier.combine($$[$0-3]),
				varName: $$[$0-2][0],
				typeDecl: $$[$0-2][1],
				assignment: $$[$0-1]
			})
		
break;
case 82:

			this.$ = yy.VarDecl.create({
				modifiers: yy.VarDeclModifier.combine(yy.VarDeclModifier.Static, $$[$0-3]),
				varName: $$[$0-2][0],
				typeDecl: $$[$0-2][1],
				assignment: $$[$0-1]
			})
		
break;
case 86:
 this.$ = new yy.ParamDecl(new yy.Token($$[$0-1]), $$[$0]) 
break;
case 87:

			const decls = []
			if (typeof $$[$0] !== 'undefined') {
				decls.push($$[$0])
			}
			this.$ = yy.ParamDeclList.fromParamDecls(decls)
		
break;
case 88:

			this.$ = yy.ParamDeclList.fromParamDecls(
				$$[$0-2].paramDecls.concat($$[$0])
			)
		
break;
case 89: case 105:
 this.$ = yy.createToken($$[$0]) 
break;
case 90:
 this.$ = $$[$0-1] 
break;
case 96:

			this.$ = yy.FuncDecl.create({
				funcName: $$[$0-4],
				runtimeParamDecls: $$[$0-3],
				returnTypeDecl: $$[$0-2],
				funcBody: $$[$0-1]
			})
		
break;
case 97:

			this.$ = yy.MethodDecl.create({
				funcName: $$[$0-4],
				runtimeParamDecls: $$[$0-3],
				returnTypeDecl: $$[$0-2],
				funcBody: $$[$0-1]
			})
		
break;
case 108:

			this.$ = yy.ClassDecl.create({
				className: $$[$0-2],
				classBody: $$[$0-1]
			})
		
break;
case 109:
 this.$ = new yy.ImportStatement($$[$0-1]) 
break;
case 116:

			$$[$0-1] = $$[$0-1] || []
			if (!Array.isArray($$[$0-1])) {
				$$[$0-1] = [$$[$0-1]]
			}
			this.$ = $$[$0-1].concat($$[$0])
		
break;
case 117:

	if (Array.isArray($$[$0])) {
		$$[$0] = $$[$0].filter(node => (
			node !== '\n' &&
			node !== ''
		))
		yy.result.push.apply(yy.result, $$[$0])
	} else {
		yy.result.push($$[$0])
	}
	return this.$

break;
}
},
table: [{3:8,4:$V0,5:$V1,9:4,10:$V2,83:10,84:$V3,90:5,95:11,96:$V4,98:6,99:7,100:$V5,101:3,102:2,103:1},{1:[3]},{1:[2,117],3:8,4:$V0,5:$V1,9:4,10:$V2,83:10,84:$V3,90:5,95:11,96:$V4,98:6,99:7,100:$V5,101:17},o($V6,[2,115]),o($V6,[2,110]),o($V6,[2,111]),o($V6,[2,112]),o($V6,[2,113]),o($V6,[2,114]),{3:18,4:$V0,5:$V1},{17:$V7,85:19},o($V8,[2,107],{97:21,94:22,66:[1,23]}),{44:24,45:$V9},o($Va,[2,1]),o($Va,[2,2]),{42:[1,26]},{42:[1,27]},o($V6,[2,116]),o($Va,[2,9]),o([1,4,5,10,66,84,96,100],$Vb,{86:28,87:$Vc}),o($Vd,$Ve,{81:30,80:31,42:$Vf}),{3:33,4:$V0,5:$V1},o($V8,[2,106]),o([5,10,67,69,70,77,84],$Vg,{6:34,4:$Vh}),{3:36,4:$V0,5:$V1},o($Vi,[2,39]),{17:[2,89]},o([4,5,66],[2,105]),o($V6,$Vj,{88:37,53:38,66:$Vk}),{42:$Vl,50:40},{18:[1,42],82:[1,43]},o($Vd,[2,87]),o($Vd,[2,84],{79:44,72:[1,45]}),o($V6,[2,108]),o($Vm,$Vg,{93:46,8:47,7:48,6:50,4:$Vh,5:$Vn}),o($Va,[2,3]),o($V6,[2,109]),o([1,10,84,96,100],$Vg,{7:48,6:50,89:51,8:52,4:$Vh,5:$Vn}),o($Vo,[2,93]),o([5,10,12,13,17,42,45,47,55,63,67,69,70],$Vg,{6:53,4:$Vh}),o([1,4,5,10,66,67,69,70,77,84,96,100],[2,91]),o([1,4,5,10,12,13,17,18,30,42,45,47,55,57,63,66,67,69,70,77,82,84,96,100],[2,51]),o([1,4,5,10,66,67,69,70,77,84,87,96,100],[2,90]),o($Vd,$Ve,{80:54,42:$Vf}),o($Vd,[2,86]),{42:$Vl,50:55},{4:$Vh,6:56,9:58,10:$V2,64:59,67:$Vg,68:62,69:$Vp,70:$Vq,76:63,77:[1,67],78:60,83:64,84:$V3,91:61,92:57},o($Vr,[2,102]),o([1,5,10,12,13,17,42,45,47,55,57,63,67,69,70,77,84,96,100],[2,7],{6:68,4:$Vh}),o($Va,[2,8]),o($Va,[2,5]),o($V6,[2,96]),o($Vo,[2,95]),o($Vs,$Vg,{7:48,6:50,65:69,8:70,4:$Vh,5:$Vn}),o($Vd,[2,88]),o($Vd,[2,83]),{67:[1,71]},o($Vr,[2,103]),o($Vr,[2,98]),o($Vr,[2,99]),o($Vr,[2,100]),o($Vr,[2,101]),{42:$Vt,73:72},{42:$Vt,73:74},{17:$V7,85:75},{42:[2,71]},{42:[2,72]},{69:[1,76],70:[1,77]},o($Va,[2,6]),{4:$Vh,6:78,9:80,10:$V2,11:102,12:$Vu,13:$Vv,14:100,15:88,16:94,17:$Vw,26:101,27:85,28:95,41:96,42:$Vx,43:90,44:99,45:$V9,46:92,47:$Vy,48:89,49:81,52:79,54:87,55:$Vz,61:84,62:83,63:$VA,64:82,67:$Vg,68:62,69:$Vp,70:$Vq},o($VB,[2,68]),o($V8,[2,104]),o($VC,$VD,{74:105,30:$VE}),o($VF,[2,74],{71:107,72:[1,108]}),o($VG,$VD,{74:109,30:$VE}),o([4,5,10,66,67,69,70,77,84],$Vb,{86:110,87:$Vc}),{42:[2,80]},{42:[2,81]},{67:[1,111]},o($VB,[2,69]),o($VH,[2,63]),o($VH,[2,64]),o($VH,[2,65]),o($VH,[2,66]),o($VH,[2,67]),o($VI,$Vg,{7:48,6:50,8:112,19:113,4:$Vh,5:$Vn,20:$VJ,21:$VK,22:$VL,23:$VM,24:$VN,25:$VO}),{11:102,12:$Vu,13:$Vv,14:100,15:88,16:94,17:$Vw,26:101,27:120,28:95,41:96,42:$Vx,43:90,44:99,45:$V9,46:92,47:$Vy,48:89},o($VI,$Vg,{7:48,6:50,58:121,8:122,4:$Vh,5:$Vn}),o([4,5,10,17,18,20,21,22,23,24,25,42,45,47,55,57,63,66,67,69,70,77,84],[2,47],{11:123,12:$Vu,13:$Vv}),o($Vi,[2,48]),o($Vi,[2,49]),{11:102,12:$Vu,13:$Vv,14:100,15:88,16:94,17:$Vw,26:101,27:124,28:95,41:96,42:$Vx,43:90,44:99,45:$V9,46:92,47:$Vy,48:89},o($Vi,$VP),{11:102,12:$Vu,13:$Vv,14:127,15:88,16:94,17:$Vw,26:128,27:129,28:95,41:126,42:$Vx,43:90,44:99,45:$V9,46:125,47:$Vy,48:89},o($Vi,[2,45]),o($Vi,[2,46]),o($Vi,$VQ),o($Vi,$VR,{29:130,30:[1,131],31:[1,132],32:[1,133],33:[1,134],34:[1,135],35:[1,136],36:[1,137],37:[1,138],38:[1,139],39:[1,140],40:[1,141]}),o($Vi,[2,41]),o($Vi,[2,42]),o($Vi,$VS),o($Vi,$VT),{15:142,17:[1,143],42:$VU,44:99,45:$V9,46:92,47:$Vy},o($Vi,[2,10]),o($Vi,[2,11]),o([10,12,13,17,42,45,47,55,57,63,67,69,70,77,84],$Vg,{7:48,6:50,75:145,8:146,4:$Vh,5:$Vn}),{11:102,12:$Vu,13:$Vv,14:100,15:88,16:94,17:$Vw,26:101,27:147,28:95,41:96,42:$Vx,43:90,44:99,45:$V9,46:92,47:$Vy,48:89},o($VF,[2,75]),{42:$Vl,50:148},o($Vm,$Vg,{7:48,6:50,8:146,75:149,4:$Vh,5:$Vn}),o($VG,$Vj,{53:38,88:150,66:$Vk}),o($Va,[2,70]),o($VH,[2,50]),{11:102,12:$Vu,13:$Vv,14:100,15:88,16:94,17:$Vw,26:101,27:151,28:95,41:96,42:$Vx,43:90,44:99,45:$V9,46:92,47:$Vy,48:89},o($VV,[2,16]),o($VV,[2,17]),o($VV,[2,18]),o($VV,[2,19]),o($VV,[2,20]),o($VV,[2,21]),o($VI,$Vg,{7:48,6:50,19:113,8:152,4:$Vh,5:$Vn,20:$VJ,21:$VK,22:$VL,23:$VM,24:$VN,25:$VO}),o($Vs,$Vg,{7:48,6:50,60:153,56:154,59:155,8:156,4:$Vh,5:$Vn,57:[1,157]}),o($VH,[2,56]),o($Vi,[2,12]),{9:80,10:$V2,11:102,12:$Vu,13:$Vv,14:100,15:88,16:94,17:$Vw,19:113,20:$VJ,21:$VK,22:$VL,23:$VM,24:$VN,25:$VO,26:101,27:85,28:95,41:96,42:$Vx,43:90,44:99,45:$V9,46:92,47:$Vy,48:89,49:81,51:158,52:159,53:160,54:87,55:$Vz,61:84,62:83,63:$VA,64:82,66:$Vk,68:62,69:$Vp,70:$Vq},o([12,13,20,21,22,23,24,25],$VP,{18:$VW}),o($VX,$VQ,{18:[1,162]}),o($VX,$VS,{18:[1,163]}),o($VX,$VT,{18:[1,164]}),{19:113,20:$VJ,21:$VK,22:$VL,23:$VM,24:$VN,25:$VO},{11:102,12:$Vu,13:$Vv,14:100,15:88,16:94,17:$Vw,26:101,27:165,28:95,41:96,42:$Vx,43:90,44:99,45:$V9,46:92,47:$Vy,48:89},o($VV,[2,25]),o($VV,[2,26]),o($VV,[2,27]),o($VV,[2,28]),o($VV,[2,29]),o($VV,[2,30]),o($VV,[2,31]),o($VV,[2,32]),o($VV,[2,33]),o($VV,[2,34]),o($VV,[2,35]),o($Vi,[2,13]),{42:$VU,44:99,45:$V9,46:166,47:$Vy},o($Vi,$VR),o($VC,[2,79]),o($VC,[2,78]),o($VC,[2,76],{19:113,20:$VJ,21:$VK,22:$VL,23:$VM,24:$VN,25:$VO}),o($VF,[2,73]),o($Vr,[2,82]),o($Vm,$Vg,{7:48,6:50,8:52,89:167,4:$Vh,5:$Vn}),o($VY,[2,22],{19:113,20:$VJ,21:$VK,22:$VL,23:$VM,24:$VN,25:$VO}),o($VH,[2,62]),o($VI,$Vg,{7:48,6:50,8:168,4:$Vh,5:$Vn}),o($VH,[2,57]),o($VH,[2,59]),o($VH,[2,60]),{9:80,10:$V2,11:102,12:$Vu,13:$Vv,14:100,15:88,16:94,17:$Vw,26:101,27:85,28:95,41:96,42:$Vx,43:90,44:99,45:$V9,46:92,47:$Vy,48:89,49:81,51:170,52:159,53:160,54:87,55:[1,169],61:84,62:83,63:$VA,64:82,66:$Vk,68:62,69:$Vp,70:$Vq},o($VI,$Vg,{7:48,6:50,8:171,4:$Vh,5:$Vn}),o($VH,[2,52]),o($VH,[2,53]),o($Vi,[2,44]),o($Vi,[2,38]),o($Vi,[2,15]),o($Vi,[2,24]),o($VY,[2,36],{19:113,20:$VJ,21:$VK,22:$VL,23:$VM,24:$VN,25:$VO}),{18:$VW},o($Vr,[2,97]),o($VH,[2,61]),{11:102,12:$Vu,13:$Vv,14:100,15:88,16:94,17:$Vw,26:101,27:172,28:95,41:96,42:$Vx,43:90,44:99,45:$V9,46:92,47:$Vy,48:89},o($VI,$Vg,{7:48,6:50,8:173,4:$Vh,5:$Vn}),o($VH,[2,54]),{9:80,10:$V2,11:102,12:$Vu,13:$Vv,14:100,15:88,16:94,17:$Vw,19:113,20:$VJ,21:$VK,22:$VL,23:$VM,24:$VN,25:$VO,26:101,27:85,28:95,41:96,42:$Vx,43:90,44:99,45:$V9,46:92,47:$Vy,48:89,49:81,51:174,52:159,53:160,54:87,55:$Vz,61:84,62:83,63:$VA,64:82,66:$Vk,68:62,69:$Vp,70:$Vq},o($VH,[2,58]),o($VI,$Vg,{7:48,6:50,8:175,4:$Vh,5:$Vn}),o($VH,[2,55])],
defaultActions: {26:[2,89],65:[2,71],66:[2,72],76:[2,80],77:[2,81]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 10;
break;
case 1:return 100;
break;
case 2:return 84;
break;
case 3:return 96;
break;
case 4:return 69;
break;
case 5:return 70;
break;
case 6:return 77;
break;
case 7:return 63;
break;
case 8:return 55;
break;
case 9:return 57;
break;
case 10:return 4;
break;
case 11:return 42;
break;
case 12:return 47;
break;
case 13:return 47;
break;
case 14:return 47;
break;
case 15:return 47;
break;
case 16:return 47;
break;
case 17:return 47;
break;
case 18:return 47;
break;
case 19:return 45;
break;
case 20:return 37;
break;
case 21:return 36;
break;
case 22:return 34;
break;
case 23:return 35;
break;
case 24:return 31;
break;
case 25:return 32;
break;
case 26:return 33;
break;
case 27:return 38;
break;
case 28:return 39;
break;
case 29:return 40;
break;
case 30:return 'RIGHT_OP';
break;
case 31:return 'LEFT_OP';
break;
case 32:return 12;
break;
case 33:return 13;
break;
case 34:return 87;
break;
case 35:return 'AND_OP';
break;
case 36:return 'OR_OP';
break;
case 37:return 'LE_OP';
break;
case 38:return 'GE_OP';
break;
case 39:return 'EQ_OP';
break;
case 40:return 'NE_OP';
break;
case 41:return 5;
break;
case 42: return(';'); 
break;
case 43: return('{'); 
break;
case 44: return('}'); 
break;
case 45: return(','); 
break;
case 46: return(':'); 
break;
case 47: return('='); 
break;
case 48: return('('); 
break;
case 49: return(')'); 
break;
case 50: return('['); 
break;
case 51: return(']'); 
break;
case 52: return('.'); 
break;
case 53: return('&'); 
break;
case 54: return('!'); 
break;
case 55: return('~'); 
break;
case 56: return('-'); 
break;
case 57: return('+'); 
break;
case 58: return('*'); 
break;
case 59: return('/'); 
break;
case 60: return('%'); 
break;
case 61: return('<'); 
break;
case 62: return('>'); 
break;
case 63: return('^'); 
break;
case 64: return('|'); 
break;
case 65: return('?'); 
break;
case 66: 
break;
case 67: /* ignore bad characters */ 
break;
}
},
rules: [/^(?:\/\/(.*))/,/^(?:import\b)/,/^(?:func\b)/,/^(?:class\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:static\b)/,/^(?:return\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:(\n))/,/^(?:([a-zA-Z_])(([a-zA-Z_])|([0-9]))*)/,/^(?:([0-9])+\.([0-9])*(([Ee][+-]?([0-9])+))?([fFlL])?)/,/^(?:([0-9])*\.([0-9])+(([Ee][+-]?([0-9])+))?([fFlL])?)/,/^(?:0[xX]([a-fA-F0-9])+([uUlL]*)?)/,/^(?:0([0-9])+([uUlL]*)?)/,/^(?:([0-9])+([uUlL]*)?)/,/^(?:L?'(\\'|[^'])+')/,/^(?:([0-9])+([Ee][+-]?([0-9])+)([fFlL])?)/,/^(?:L?"(\\"|[^"])*")/,/^(?:>>=)/,/^(?:<<=)/,/^(?:\+=)/,/^(?:-=)/,/^(?:\*=)/,/^(?:\/=)/,/^(?:%=)/,/^(?:&=)/,/^(?:\^=)/,/^(?:\|=)/,/^(?:>>)/,/^(?:<<)/,/^(?:\+\+)/,/^(?:--)/,/^(?:->)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:!=)/,/^(?:$)/,/^(?:;)/,/^(?:(\{|<%))/,/^(?:(\}|%>))/,/^(?:,)/,/^(?::)/,/^(?:=)/,/^(?:\()/,/^(?:\))/,/^(?:(\[|<:))/,/^(?:(\]|:>))/,/^(?:\.)/,/^(?:&)/,/^(?:!)/,/^(?:~)/,/^(?:-)/,/^(?:\+)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:<)/,/^(?:>)/,/^(?:\^)/,/^(?:\|)/,/^(?:\?)/,/^(?:[ \t\v\r\f])/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = generatedParser;
exports.Parser = generatedParser.Parser;
exports.parse = function () { return generatedParser.parse.apply(generatedParser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}